---
import "../../styles/root.scss";
import Configurator from "../../layouts/configurator.astro";
import PersistentWindow from "../../components/persistentWindow.astro";
import { cardList } from "../../data/cardData";
import { bodyTypes } from "../../data/cardData";

import noImgPlchldr from "../../assets/noImg.svg";

const cardId = "fullbody";
const cardData = cardList[cardId];

function getTagClass(tag: string) {
  const tagString = tag.toLowerCase();
  if (tagString === "best selling") return "tag-bs";
  if (bodyTypes.includes(tagString)) return "tag-btype";
  return "";
}

const priceState = cardData.isDisabled
  ? "n/a"
  : "€" + cardData.price.toFixed(0);
const configButtonText = cardData.isDisabled ? "Ha. nerd." : "Configure";
---

<Configurator>
  <PersistentWindow ignoreScrollCheck />

  <div class="configWrap">
    <div class="collapsed" id="configStatus">
      <div class="stCell1">
        <div class="stTitle">*{cardData.title}</div>
        <div class="stDesc">{cardData.description}</div>
      </div>
      <div class="stCell2">
        <div class="stPricebox">
          <span class="estSpan">Est. Price</span>
          <div class="numeros">
            <div id="priceCalc">€{cardData.price}</div>
          </div>
        </div>
        <div
          class="disclaimer"
          aria-label="Overall request complexity or demand may affect the final price."
        >
          <span class="disclaimerIco material-symbols-rounded">info</span>
        </div>
        <button
          class="submitButtons"
          type="button"
          id="buttonLink"
          onclick="document.getElementById('submitBtn').click()">Submit</button
        >
        <div id="cancel" class="material-symbols-rounded">close</div>
      </div>
    </div>
    <div class="cardBody" id={cardId} transition:name={`cardIMGG-${cardId}`}>
      <div class="imgGrid">
        <div class="imgContainer" id="imageGridDefault">
          <img
            src={cardData.images[0].src}
            alt={cardData.images[0].alt}
            class="img"
            style={cardData.images[0].pos
              ? `object-position:${cardData.images[0].pos}`
              : cardData.images[0].style}
          />
        </div>
        <div class="imgContainer">
          <img
            src={cardData.images[1].src}
            alt={cardData.images[1].alt}
            class="img"
            style={cardData.images[1].pos
              ? `object-position:${cardData.images[1].pos}`
              : cardData.images[1].style}
          />
        </div>
        <div class="imgContainer">
          <img
            src={cardData.images[2].src}
            alt={cardData.images[2].alt}
            class="img"
            style={cardData.images[2].pos
              ? `object-position:${cardData.images[2].pos}`
              : cardData.images[2].style}
          />
        </div>
        <div class="imgContainer">
          <img
            src={cardData.images[3].src}
            alt={cardData.images[3].alt}
            class="img"
            style={cardData.images[3].pos
              ? `object-position:${cardData.images[3].pos}`
              : cardData.images[3].style}
          />
        </div>
      </div>

      <form id="configWindow">
        {
          cardData.configData &&
            cardData.configData.map((config, idx) => (
              <>
                {/* Category/Section Label */}
                {idx === 0 && (
                  <>
                    <div class="categoryLabel">General Configurations</div>
                    <hr />
                  </>
                )}
                {config.subCategory === "chrDetail" && (
                  <div class="subCategoryBox">
                    <div class="subCategory">Character Detail</div>
                    <div class="subCategoryDesc">Choose an option.</div>
                  </div>
                )}
                {config.subCategory === "background" && (
                  <div class="subCategoryBox">
                    <div class="subCategory">Background Art</div>
                    <div class="subCategoryDesc">Choose an option.</div>
                  </div>
                )}
                {config.subCategory === "nsfw" && (
                  <div class="subCategoryBox">
                    <div class="subCategory">NSFW?</div>
                    <div class="subCategoryDesc">Choose an option.</div>
                  </div>
                )}
                {config.subCategory === "character" &&
                  idx ===
                    cardData.configData?.findIndex(
                      (c) => c.subCategory === "character"
                    ) && (
                    <>
                      <div class="categoryLabel">Request Detailing</div>
                      <hr />
                      <div class="subCategoryBox">
                        <div class="subCategory">Character(s)</div>
                        <div class="subCategoryDesc">Fill in the text box.</div>
                      </div>
                    </>
                )}
                {config.subCategory === "contact" &&
                  idx ===
                    cardData.configData?.findIndex(
                      (c) => c.subCategory === "contact"
                    ) && (
                    <>
                      <div class="categoryLabel">Contacts</div>
                      <hr />
                      <div class="subCategoryBox">
                        <div class="subCategory">Interaction Endpoints</div>
                        <div class="subCategoryDesc">Fill in the text box.</div>
                      </div>
                    </>
                )}

                {/* Render form fields */}
                {config.type === "singleChoice" &&
                  config.options &&
                  config.options.map((opt, optIdx) => (
                    <label class="formComponent">
                      <div class="ocHeader">
                        <div class="ocCell1">
                          <input
                            type="radio"
                            name={config.id}
                            id={`${config.id}_${optIdx}`}
                            value={opt.optionName}
                            required={config.required}
                          />
                          <span class="customRadio" />
                          <div class="optionTitle">{opt.optionName}</div>
                        </div>
                        <div class="optionValue">
                          {opt.optionPrice == null || opt.optionPrice === 0 ? "" : "+€" + opt.optionPrice}
                        </div>
                      </div>
                      <div class="optionDesc">{opt.optionDescription}</div>
                    </label>
                  ))}

                {config.type === "flipflop" && config.options && (
                  <div class="flipflopBox">
                    {config.options.map((opt, optIdx) => (
                      <label class="formComponent flipflop">
                        <input
                          type="radio"
                          name={config.id}
                          id={`${config.id}_${optIdx}`}
                          value={opt.optionName}
                          checked={optIdx === 0}
                        />
                        <div class="optionTitle">{opt.optionName}</div>
                        <div class="optionDesc">{opt.optionDescription}</div>
                      </label>
                    ))}
                  </div>
                )}

                {config.type === "textarea" && (
                  <div class="formComponent">
                    <div class="textAreaTitle">
                      {config.questionTitle || "Text area component"}
                    </div>
                    <div class="textAreaDesc" set:html={config.questionDescription || ""}></div>
                    <textarea
                      class="formTextInput"
                      id={config.id}
                      name={config.id}
                      placeholder={config.placeholder || ""}
                      required={config.required}
                    />
                  </div>
                )}
              </>
            ))
        }
        <button class="submitButtons" type="submit" id="submitBtn"
          >Submit</button
        >
      </form>

      <div id="infobox">
        <div id="backB" class="material-symbols-rounded">arrow_back</div>
        <div class="infocell1">
          <div class="typeTitle">{cardData.title}</div>
          <div class="description" set:html={cardData.description} />
          <div class="tags">
            {
              cardData.tags.map((tag) => (
                <span class={`tag ${getTagClass(tag)}`}>{tag}</span>
              ))
            }
          </div>
          <div class="priceBox">
            <span class="startsFrom">Starts from...</span>
            <div class="price">{priceState}</div>
          </div>
          <div class={cardData.isDisabled ? "disabled" : ""} id="startConfig">
            {configButtonText}
            <div class="configIco material-symbols-rounded">
              arrow_circle_right
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Configurator>

<script>
  import { cardList } from "../../data/cardData";
  const cardId = "fullbody";
  const cardData = cardList[cardId];

  function setupFormValidation() {
    const configForm = document.getElementById(
      "configWindow"
    ) as HTMLFormElement;
    const submitBtn = document.getElementById("submitBtn") as HTMLButtonElement;

    // Track already validated fields to avoid duplicate error messages
    const validatedFields = new Set();

    // Create a container for error messages
    const errorContainer = document.createElement("div");
    errorContainer.className = "formInvalidErr";


    configForm.insertBefore(errorContainer, submitBtn);

    submitBtn.addEventListener("click", function (event) {
      // Clear previous error messages
      errorContainer.innerHTML = "";
      let hasErrors = false;

      // Find all required radio button groups
      const radioGroups: Record<string, HTMLInputElement[]> = {};
      configForm
        .querySelectorAll('input[type="radio"][required]')
        .forEach((radio) => {
          const name = (radio as HTMLInputElement).getAttribute(
            "name"
          ) as string;
          if (!radioGroups[name]) {
            radioGroups[name] = [];
          }
          radioGroups[name].push(radio as HTMLInputElement);
        });

      // Check each radio group
      Object.entries(radioGroups).forEach(([name, radios]) => {
        // Check if any radio in this group is checked
        const isChecked = radios.some((radio) => radio.checked);

        if (!isChecked) {
          hasErrors = true;

          // Find section name for better error message
          let sectionName: string = name;
          const formComponent = radios[0].closest(".formComponent");
          const parentElement = formComponent
            ? formComponent.parentElement
            : null;
          const subCategoryEl = parentElement
            ? parentElement.previousElementSibling
            : null;
          if (
            subCategoryEl &&
            subCategoryEl.classList.contains("subCategoryBox")
          ) {
            const subCatTitle = subCategoryEl.querySelector(".subCategory");
            if (subCatTitle && subCatTitle.textContent !== null) {
              sectionName = subCatTitle.textContent;
            }
          }

          // Add error message
          const errorMsg = document.createElement("div");
          errorMsg.innerHTML = `Nothing is selected in <span class="b7">${sectionName}</span> !`;
          errorMsg.className = "errBlob";
          errorContainer.appendChild(errorMsg);

          // Scroll to the first error
          if (!validatedFields.has(name)) {
            const formComponent = radios[0].closest(".formComponent");
            formComponent?.scrollIntoView({
              behavior: "smooth",
              block: "center",
            });
            validatedFields.add(name);
          }
        }
      });

      // Check required text areas
      configForm.querySelectorAll("textarea[required]").forEach((elem) => {
        const textarea = elem as HTMLTextAreaElement;
        if (!textarea.value.trim()) {
          hasErrors = true;

          // Find the textarea title for better error message
          const textAreaTitle = (textarea.parentElement?.querySelector('.textAreaTitle') as HTMLElement)?.textContent;

          const errorMsg = document.createElement("div");
          errorMsg.innerHTML = `<span class="b7">${textAreaTitle}</span> is required!`;
          errorMsg.className = "errBlob";
          errorContainer.appendChild(errorMsg);

          // Scroll to the first error
          if (!validatedFields.has(textarea.id)) {
            textarea.scrollIntoView({ behavior: "smooth", block: "center" });
            validatedFields.add(textarea.id);
          }
        }
      });
      if (hasErrors) {
        event.preventDefault();
      }
    });
  }

  // Call this function after the page loads
  document.addEventListener("DOMContentLoaded", setupFormValidation);

  const submitButton = document.getElementById(
    "submitBtn"
  ) as HTMLButtonElement;
  const configForm = document.getElementById("configWindow") as HTMLFormElement;

  configForm.addEventListener("submit", async (event: Event) => {
    event.preventDefault();
    if (!configForm.checkValidity()) {
      configForm.reportValidity();
      return;
    }
    const data: { [key: string]: string } = {};
    const formData = new FormData(configForm);

    if (cardData.configData) {
      for (const field of cardData.configData) {
        const value = formData.get(field.id);
        if (value !== null) {
          data[field.id] = value.toString();
        }
      }
    }

    console.log("Collected config data:", data);
  });

  let priceAdd: number = 0;
  // Change price randomly every second, but avoid negative numbers
  setInterval(() => {
    priceAdd = Math.floor(Math.random() * 100);
    updatePrice();
  }, 1000);

  function animateNumber(
    elem: HTMLElement,
    start: number,
    end: number,
    duration = 500
  ) {
    const startTime = performance.now();

    function update(currentTime: number) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      // Linear interpolation (lerp)
      const value = Math.round(start + (end - start) * progress);
      elem.textContent = `€${value.toFixed(2)}`;

      if (progress < 1) {
        requestAnimationFrame(update);
      }
    }
    requestAnimationFrame(update);
  }

  let lastPrice = cardData.price;

  function updatePrice() {
    const priceElem = document.getElementById("priceCalc");
    if (priceElem) {
      const newPrice = cardData.price + priceAdd;
      animateNumber(priceElem, lastPrice, newPrice, 400);
      lastPrice = newPrice;
    }
  }

  updatePrice();

  function inibackButton() {
    const back = document.getElementById("backB") as HTMLElement;
    back.addEventListener("click", () => {
      window.history.back();
    });
  }
  inibackButton();

  function initStartConfig() {
    const infoBox = document.getElementById("infobox") as HTMLElement;
    const configWindow = document.getElementById("configWindow") as HTMLElement;
    const startButton = document.getElementById("startConfig") as HTMLElement;
    const configStatus = document.getElementById("configStatus") as HTMLElement;
    const cardBody = document.querySelector(".cardBody") as HTMLElement;
    const imgGrid = document.querySelector(".imgGrid") as HTMLElement;
    const close = document.getElementById("cancel") as HTMLElement;

    function configuring(state: Boolean) {
      if (state) {
        //infoBox.style.display = "none";
        infoBox.style.display = "none";
        configWindow.style.display = "block";
        startButton.classList.add("configGo");
        cardBody.classList.add("configuring");
        imgGrid.classList.add("configuring");
        configStatus.classList.remove("collapsed");
      } else {
        infoBox.style.display = "flex";
        configWindow.style.display = "none";
        startButton.classList.remove("configGo");
        cardBody.classList.remove("configuring");
        imgGrid.classList.remove("configuring");
        configStatus.classList.add("collapsed");
      }
    }

    //skip
    //configuring(true);

    startButton.addEventListener("click", () => {
      configuring(true);
    });
    close.addEventListener("click", () => {
      configuring(false);
    });
  }
  initStartConfig();

  document.addEventListener("astro:after-swap", () => {
    initStartConfig();
    inibackButton();
    setupFormValidation();
  });
</script>

<style>
  .configWrap {
    display: flex;
    flex-direction: column;
    width: 100vw;
    height: 100vh;
    overflow-y: hidden;
  }
  #configStatus {
    width: 100vw;
    display: flex;
    justify-content: space-between;
    padding: 1rem;
    min-height: 60px;
    border-bottom: 1px solid var(--fore);
    background: var(--base);
    transition: all 0.2s var(--sleek);

    &.collapsed {
      max-height: 0;
      padding: 0;
      min-height: 0;
      overflow: hidden;
    }
  }

  .stCell1 {
    display: flex;
    flex-direction: column;
    color: var(--fore);
  }

  .stTitle {
    font-size: 2rem;
    font-family: var(--doto);
    font-weight: 900;
    color: var(--accent);
  }
  .stDesc {
    font-size: 1rem;
    font-family: var(--content);
  }

  .stCell2 {
    display: flex;
    align-items: center;
    color: var(--fore);
  }

  .stPricebox {
    font-family: var(--content);
    & .estSpan {
      font-size: 1rem;
      color: var(--foreSecondary);
    }
    & .numeros {
      font-size: 2rem;
      font-weight: 900;
      font-family: var(--doto);
    }
  }
  .disclaimer {
    height: 100%;
    position: relative;
    display: flex;
    color: var(--fore);
    margin-right: 0.3em;
    user-select: none;
    text-align: center;
    line-height: 1.4;
    align-items: flex-end;
    margin-right: 5em;
    margin-left: 1em;
    font-family: var(--contentSecondary);
    & .disclaimerIco {
      font-size: 1.7rem;
      transform: translateY(-0.225em);
    }

    &.important {
      color: red;

      &::before {
        background: #ff2929;
      }
    }

    &::before {
      content: attr(aria-label);
      position: absolute;
      background: var(--base);
      transition: all 0.1s 0.3s;
      color: var(--fore);
      font-size: 1rem;
      padding: 0.3em 0.6em;
      border-radius: 12px;
      pointer-events: none;
      user-select: none;
      opacity: 0;
      min-width: 1000%;
      z-index: 1;
      box-shadow: rgba(36, 36, 40, 0.377) 0 10px 20px;
      transform: translate(-87%, 100%);
    }

    &:hover::before {
      transform: translate(-87%, 120%);
      transition: all 0.2s;
      opacity: 1;
    }
  }

  #cancel {
    font-size: 3rem;
    cursor: pointer;
    color: var(--fore);
    transition:
      color 0.2s var(--sleek),
      transform 0.2s var(--sleek);

    &:hover {
      color: var(--prim);
      transform: scale(1.1);
    }
  }

  .cardBody {
    --cardRounding: 50px;
    --animDur: 0.3s;
    flex: 1; /* This is the critical part - take all remaining space */
    display: flex;
    background-color: var(--base);
    padding: 1rem;
    overflow-y: auto; /* Allow content to scroll if needed */
    transition: width var(--animDur) var(--sleek);
    border-radius: 0px;
    transition:
      background 0.2s var(--sleek),
      border 0.2s var(--sleek),
      padding 0.2s var(--sleek);

    & .configuring {
      padding: 0rem;
    }
  }

  .imgGrid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5em;
    padding: 0rem;
    min-width: 50%;
    & .configuring {
      padding: 1rem;
    }
  }

  .imgContainer {
    --imgSize: 100%;
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
    transition: all var(--animDur) var(--sleek);

    --imgGridRounding: calc(var(--cardRounding) / 1.5);
  }

  .imgContainer {
    border-radius: var(--imgGridRounding);
  }

  .img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform var(--animDur) ease-in-out;
  }
  #infobox {
    display: flex;
    justify-content: space-between;
    color: var(--fore);
    padding: 0 1em;
    position: relative;
    transition: color 0.2s var(--sleek);
  }

  #backB {
    color: var(--fore);
    border: 1px solid var(--fore);
    align-self: flex-start;
    font-size: 6rem;
    border-radius: calc(var(--cardRounding) / 1.5);
    transition: all 0.2s var(--sleek);

    &:hover {
      background: var(--prim);
      border-color: var(--prim);
      color: var(--base);
      cursor: pointer;
      border-radius: 10%;
    }
  }

  .infocell1 {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    width: 60%;
  }

  .typeTitle {
    font-size: 6rem;
    font-family: var(--doto);
    font-weight: 900;
    margin-bottom: 0.2em;
  }

  .description {
    font-size: 1.5rem;
    font-family: var(--content);
    font-weight: 300;
  }

  .tags {
    display: flex;
    margin-top: 1em;
    gap: 0.5em;
    flex-wrap: wrap;
    justify-content: flex-end;
  }

  .tag {
    font-family: var(--doto);
    font-weight: 900;
    background: var(--primSecondary);
    color: var(--fore);
    padding: 0.2em 0.8em;
    border-radius: 20px;
    box-sizing: border-box;
    transition:
      background 0.2s var(--sleek),
      color 0.2s var(--sleek);

    &.tag-best {
      background: gold;
      color: black;
    }

    &.tag-btype {
      border: 1px solid var(--primSecondary);
      background: transparent;
      color: var(--accent);
    }
  }

  .infocell2 {
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-end;
    height: 100%;
    margin-right: 1em;
    right: 0;
  }

  .priceBox {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
    font-size: 3rem;
    transition: all var(--animDur) var(--sleek);
    margin-top: 1em;
  }

  .startsFrom {
    font-family: var(--content);
    font-weight: 400;
    font-size: 0.5em;
    color: var(--foreSecondary);
    transform: translateY(-0.7em);
    transition: color 0.2s var(--sleek);
  }

  .price {
    font-family: var(--content);
    font-weight: 900;
    font-size: 2em;
    color: var(--fore);
    transition: color 0.2s var(--sleek);
  }

  #startConfig {
    position: relative;
    display: flex;
    align-items: center;
    font-family: var(--content);
    font-size: 1.3rem;
    background: var(--prim);
    color: var(--fore);
    border: 1px solid var(--base);
    padding: 0.4em 5em;
    border-radius: 25px;
    margin-top: 1em;
    margin-bottom: 0.5em;
    pointer-events: all;
    opacity: 1;
    cursor: pointer;
    font-weight: 700;
    text-align: center;
    transition: all var(--animDur) var(--sleek);

    & .configIco {
      right: 0.1em;
      position: absolute;
      font-size: 1.6rem;
      transform: translateX(-2em);
      opacity: 0;
      transition: none;
    }

    &:hover {
      background: transparent;
      color: var(--fore);
      border: 1px solid var(--prim);
      transform: scale(1.05);

      & .configIco {
        opacity: 1;
        transform: translateX(0);
        transition: all var(--animDur) var(--sleek);
      }
    }
    &.disabled {
      background: rgba(0, 0, 0, 0);
      box-sizing: content-box;
      border: 2px solid var(--viscueDisabled);
      color: var(--viscueDisabled);
      pointer-events: none;
      font-size: 1.2rem;
    }
    &.configGo {
      transition: all var(--animDur) var(--sleek);
      opacity: 0;
      pointer-events: none;
    }
  }

  #configWindow {
    width: 100%;
    height: 100%;
    overflow-y: scroll;
    display: none;
    margin-left: 1em;
    padding: 0 12em;
  }
  .formComponent {
    --componentRounding: 20px;
    display: flex;
    flex-direction: column;
    margin-bottom: 1em;
    color: var(--fore);
    font-family: var(--content);
    font-size: 1.5rem;
    border: 2px solid var(--foreSecondary);
    border-radius: var(--componentRounding);
    padding: 0.5em 1em;
    box-sizing: border-box;
    cursor: pointer;

    &:has(input[type="radio"]:checked) {
      border-color: var(--prim);
    }
    input[type="radio"] {
      appearance: none;
      opacity: 0;
      position: absolute;
      width: 0;
      height: 0;
      margin: -1px;
      overflow: hidden;
      z-index: -1;

      &:checked ~ .customRadio {
        border-color: var(--prim);

        &:after {
          display: block;
        }
      }
      &:focus-visible ~ .customRadio {
        outline: 2px solid var(--accent);
        outline-offset: 2px;
      }
    }

    .customRadio {
      --radioSize: 1em;
      --dotSize: calc(var(--radioSize) / 2);
      top: 0;
      left: 0;
      height: var(--radioSize);
      width: var(--radioSize);
      border-radius: 50%;
      border: 2px solid var(--foreSecondary);

      &:after {
        position: relative;
        content: "";
        display: none;
        width: var(--dotSize);
        height: var(--dotSize);
        top: 0.15em;
        left: 0.15em;
        border-radius: 50%;
        background: var(--prim);
      }
    }
    &.flipflop {
      display: flex;
      font-family: var(--content);
      font-size: 1.5rem;
      color: var(--fore);
      border: 1px solid var(--foreSecondary);
      width: 100%;
      padding-right: 0;

      &:nth-of-type(1) {
        border-radius: var(--componentRounding) 0 0 var(--componentRounding);
      }
      &:nth-of-type(2) {
        border-radius: 0 var(--componentRounding) var(--componentRounding) 0;
      }
      &:has(input[type="radio"]:checked) {
        z-index: 2;
        border-width: 3px;
      }
    }
  }
  .categoryLabel {
    font-family: var(--content);
    font-size: 2rem;
    font-weight: 900;
    color: var(--fore);
    margin-bottom: 0.5em;
  }
  .subCategoryBox {
    display: flex;
    flex-direction: column;
    color: var(--fore);
    font-family: var(--content);
    font-size: 1.5rem;
    padding: 0.5em;
    margin-bottom: 0.5em;
  }
  .subCategory {
    font-family: var(--content);
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--fore);
  }
  .subCategoryDesc {
    font-family: var(--content);
    font-size: 1rem;
    color: var(--foreSecondary);
  }
  .ocHeader {
    border-bottom: 1px solid var(--foreSecondary);
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 2em;
  }
  .ocCell1 {
    display: flex;
    align-items: center;
    gap: 0.2em;
    font-family: var(--content);
    font-size: 1.3rem;
  }
  .optionDesc {
    padding: 1em 0;
    font-size: 1rem;
  }
  .optionTitle {
    font-weight: 700;
  }
  .optionValue {
    font-family: var(--content);
    font-size: 1.1rem;
    font-weight: 300;
    color: var(--fore);
    vertical-align: middle;
  }

  .flipflopBox {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 0.5em 0;
  }

  .textAreaTitle {
    font-family: var(--content);
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--fore);
  }
  .textAreaDesc {
    font-family: var(--content);
    font-size: 1rem;
    color: var(--foreSecondary);
    margin-bottom: 0.5em;
  }
  .formTextInput {
    height: 70px;
    resize: vertical;
    border-radius: 10px;
    padding: 1em;
  }
</style>
