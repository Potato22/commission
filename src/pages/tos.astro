---
import Markdown from "../layouts/Markdown.astro";
//import ConfigModal from "../components/configurator.astro";
import ImageZoom from "../components/imageZoom.astro";
import PersistentWindow from "../components/persistentWindow.astro";
import QuirkyLoad from "../components/quirkyLoad.astro";
import TOS from "../components/sections/TOSfile.mdx";

import "../styles/root.scss";
import "../styles/md.scss";
---

<Markdown title="TOS" description="Potto's commission Terms of Service">
  <QuirkyLoad />
  <ImageZoom />
  <div class="mdCont">
    <TOS />
  </div>

  <div class="lesgo">
    <label id="isReadLabel">
      <input
        id="tosCheckBox"
        type="checkbox"
        class="tosPhantomCheckBox"
        required
      />
      <span class="custCheckbox"></span>
      <div class="butoneText"><i>Ignorantia legis non excusat</i>. You agreed to the TOS the moment you sent an order</div>
    </label>

    <div id="tosAccept">Let's go</div>
  </div>
</Markdown>

<script>
  import { navigate } from "astro:transitions/client";
  import { acceptTOS, isTOSAccepted } from "../components/tosLogic";
  import { commState } from "../data/cardData";

  function tosLogic() {
    //console.log("started tos");
    const tosAccept = document.getElementById("tosAccept");
    const tosCheckBox = document.getElementById("tosCheckBox");
    const checkBoxRequirement = document.getElementById("isReadLabel");

    if (!(tosAccept && tosCheckBox)) {
      return;
    }

    if (checkBoxRequirement && (isTOSAccepted() || commState.isClosed)) {
      checkBoxRequirement.style.display = "none";
      tosAccept.innerHTML = "I've done enough reading";
    }

    tosAccept.addEventListener("click", tosClose);
  }

  function tosClose() {
    const tosCheckBox = document.getElementById(
      "tosCheckBox"
    ) as HTMLInputElement;
    const checked = tosCheckBox?.checked;
    const checkBoxRequirement = document.getElementById("isReadLabel");

    if (checked || commState.isClosed) {
      navigate("/");
      //acceptTOS();
    } else {
      if (checkBoxRequirement) {
        checkBoxRequirement.style.animation = "flash .2s 3";
        checkBoxRequirement.style.color = "var(--accent)";
        setTimeout(() => {
          checkBoxRequirement.removeAttribute("style");
        }, 600);
      }
    }
  }

  function shutdownTosLogic() {
    //console.log("shutdown tos");
    const tosAccept = document.getElementById("tosAccept");
    if (tosAccept) {
      tosAccept.removeEventListener("click", tosClose);
      //console.log("Listener removed from", tosAccept);
    }
  }

  document.addEventListener("astro:page-load", tosLogic);
  document.addEventListener("astro:before-preparation", shutdownTosLogic);
</script>

<style lang="scss">
  @use "../styles/mixins" as *;
  .lesgo {
    width: 100vw;
    display: flex;
    flex-direction: column;
    align-items: center;
    color: var(--fore);
  }
  #isReadLabel {
    display: flex;
    align-items: center;
    user-select: none;
    font-family: var(--doto);
    font-weight: 900;
    font-size: 1.1rem;
    vertical-align: middle;
    margin-bottom: 2em;
    cursor: pointer;

    input {
      display: none;
    }
    & input:checked {
      ~ .custCheckbox {
        border-color: var(--accent);
        border-width: 15px;
        background: var(--accent);

        &::after {
          display: grid;
          place-items: center;
          border-width: 0 3px 3px 0;
        }
      }
      //background: var(--accent);
    }
  }
  .custCheckbox {
    --size: 30px;
    position: relative;
    height: var(--size);
    width: var(--size);
    border-radius: 5px;
    margin-right: 0.5em;
    border: 2px solid var(--prim);
    transition: all 0.2s var(--sleek);
    background: transparent;

    &::after {
      content: "";
      position: absolute;
      display: none;
      width: 10px;
      height: 15px;
      border: solid var(--base);
      border-radius: 0 0 3px 0;
      border-width: 0 10px 10px 0;
      transform: rotate(45deg) translate(-10px, -4px);
    }
  }
  #tosAccept {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: var(--content);
    font-size: 1.3rem;
    background: var(--prim);
    color: var(--fore);
    border: 2px solid var(--base);
    padding: 0.4em 5em;
    border-radius: 25px;
    opacity: 1;
    cursor: pointer;
    font-weight: 700;
    transition: all 0.2s var(--sleek);

    @include breakpoint(tiny, mobile, tablet) {
      padding: 1em 5em;
    }
    &:hover {
      background: transparent;
      border: 2px solid var(--prim);
    }
  }
</style>

<style is:inline lang="scss">
  .logoHead {
    --logoSize: 300px;
    width: var(--logoSize);
    height: var(--logoSize);
    margin-top: 2em;
    .logoBase {
      fill: var(--fore);
    }
    .logoText {
      fill: var(--base);
    }
  }
</style>
