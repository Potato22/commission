---
import "../../styles/root.scss";
import "../../styles/dz.scss";
import "../../styles/formComponent.scss";
import "../../styles/configurator.scss";
import { cardList } from "../../data/cardData";
import type { FormQuestion } from "../../data/cardData";
import { bodyTypes } from "../../data/cardData";

const cardId = "sketchbook";
const cardData = cardList[cardId];

function getTagClass(tag: string) {
  const tagString = tag.toLowerCase();
  if (tagString === "best selling") return "tag-bs";
  if (bodyTypes.includes(tagString)) return "tag-btype";
  return "";
}

const priceState = cardData.isDisabled
  ? "n/a"
  : "€" + cardData.price.toFixed(0);
const configButtonText = cardData.isDisabled ? "Ha. nerd." : "Configure";

// Group configData by category
function groupByCategory(
  configData: FormQuestion[] = []
): Record<string, FormQuestion[]> {
  if (!configData) return {};
  return configData.reduce(
    (acc, item) => {
      if (!acc[item.category]) acc[item.category] = [];
      acc[item.category].push(item);
      return acc;
    },
    {} as Record<string, FormQuestion[]>
  );
}

function assertSingleFileUpload(configData: FormQuestion[] = []) {
  const fileUploadCount = configData.filter(
    (q) => q.type === "fileUpload"
  ).length;
  if (fileUploadCount > 1) {
    throw new Error(
      `Dropzone only can be instanced >>once<< inside a form. Found: ${fileUploadCount} || This is what you get for using Dropzone`
    );
  }
}
assertSingleFileUpload(cardData.configData ?? []);

const groupedConfig = groupByCategory(cardData.configData ?? []);
---

<div id="configWrap" data-configure-id={cardId}>
  <div class="" id="configStatus">
    <div class="stCell1">
      <div class="stTitle">*{cardData.title}</div>
      <div class="stDesc" set:html={cardData.description}></div>
    </div>
    <div class="stCell2">
      <div class="stPricebox">
        <span class="estSpan">Est. Price</span>
        <div class="numeros">
          <div id="priceCalc">€{cardData.price}</div>
        </div>
      </div>
      <div
        class="disclaimer"
        aria-label="Estimation only calculates the >>base<< prices of all available options"
      >
        <span class="disclaimerIco material-symbols-rounded">info</span>
      </div>
      <button
        class="submitButtons"
        type="button"
        id="buttonLink"
        onclick="document.getElementById('proceedBtn').click()"
      >
        <span class="submitString">Submit</span>
        <div class="configIco material-symbols-rounded">priority</div>
      </button>
      <div id="cancel" class="material-symbols-rounded">close</div>
    </div>
  </div>
  <div class="cardBody" id={cardId} transition:name={`cardIMGG-${cardId}`}>
    <div class="imgGrid">
      <div class="imgContainer" id="imageGridDefault">
        <img
          src={cardData.images[0].src}
          alt={cardData.images[0].alt ?? "Image"}
          class="img"
          style={cardData.images[0].pos
            ? `object-position:${cardData.images[0].pos}`
            : cardData.images[0].style}
        />
      </div>
      <div class="imgContainer">
        <img
          src={cardData.images[1].src}
          alt={cardData.images[1].alt ?? "Image"}
          class="img"
          style={cardData.images[1].pos
            ? `object-position:${cardData.images[1].pos}`
            : cardData.images[1].style}
        />
      </div>
      <div class="imgContainer">
        <img
          src={cardData.images[2].src}
          alt={cardData.images[2].alt ?? "Image"}
          class="img"
          style={cardData.images[2].pos
            ? `object-position:${cardData.images[2].pos}`
            : cardData.images[2].style}
        />
      </div>
      <div class="imgContainer">
        <img
          src={cardData.images[3].src}
          alt={cardData.images[3].alt ?? "Image"}
          class="img"
          style={cardData.images[3].pos
            ? `object-position:${cardData.images[3].pos}`
            : cardData.images[3].style}
        />
      </div>
    </div>

    <form id="configWindow">
      {/* General Configurations */}
      <div class="categoryLabel">General Configurations</div>
      <hr />
      {
        groupedConfig["general_configurations"] &&
          groupedConfig["general_configurations"].map((config, idx: number) => (
            <>
              {config.subCategory === "characterRender" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    Character Detail{" "}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">Choose an option.</div>
                </div>
              )}
              {config.subCategory === "bodyForm" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    Anthro?{" "}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">Choose an option.</div>
                </div>
              )}
              {config.subCategory === "background" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    Background Art{" "}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">
                    Choose an option.{" "}
                    <i>
                      <br />
                      (Some options are hidden depending the selected "Character
                      Detail")
                    </i>
                  </div>
                </div>
              )}
              {config.subCategory === "nsfw" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    NSFW?
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">Choose an option.</div>
                </div>
              )}

              {/* templates */}
              {config.type === "singleChoice" &&
                config.options &&
                config.options.map((opt, optIdx) => (
                  <label
                    class={`formComponent${opt.visibleIf ? " conditionalOpt" : ""}`}
                    data-visible-if={
                      opt.visibleIf ? JSON.stringify(opt.visibleIf) : ""
                    }
                    style={opt.visibleIf ? "display:none;" : ""}
                    id={`${config.id}_${optIdx}_wrapper`}
                  >
                    <div class="ocHeader">
                      <div class="ocCell1">
                        <input
                          type="radio"
                          name={config.id}
                          id={`${config.id}_${optIdx}`}
                          value={opt.optionName}
                          required={config.required}
                          checked={!!opt.preChecked}
                        />
                        <span class="customRadio" />
                        <div class="optionTitle">
                          {opt.optionName ? opt.optionName : "?"}
                        </div>
                      </div>
                      <div class="optionValue">
                        {opt.optionPrice == null || opt.optionPrice === 0
                          ? "init"
                          : opt.basePrice //elseif
                            ? "€" + opt.optionPrice
                            : "+€" + opt.optionPrice}
                      </div>
                    </div>
                    <div class="optionDesc" set:html={opt.optionDescription} />
                  </label>
                ))}

              {config.type === "flipflop" &&
                config.options &&
                config.options.length === 2 && (
                  <div class="flipflopBox">
                    {config.options.map((opt, optIdx) => (
                      <label class="formComponent flipflop">
                        <input
                          type="radio"
                          name={config.id}
                          id={`${config.id}_${optIdx}`}
                          value={opt.optionName}
                          checked={!!opt.preChecked}
                        />
                        <div class="flipflopHeader">
                          <div class="optionTitle">
                            {opt.optionName ? opt.optionName : "?"}
                          </div>
                          <div class="optionValue">
                            {opt.optionPrice == null || opt.optionPrice === 0
                              ? ""
                              : opt.basePrice //elseif
                                ? "€" + opt.optionPrice
                                : "+€" + opt.optionPrice}
                          </div>
                        </div>
                        <div class="optionDesc">{opt.optionDescription}</div>
                      </label>
                    ))}
                  </div>
                )}

              {config.type === "textarea" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <textarea
                    class="formTextInput"
                    id={config.id}
                    name={config.id}
                    placeholder={config.placeholder || ""}
                    required={config.required}
                  />
                </div>
              )}

              {/* infocard ommitted  */}
              {/* uploader ommitted  */}
            </>
          ))
      }

      {/* Request Detailing */}
      <div class="categoryLabel">Request Detailing</div>
      <hr />
      <div class="subCategoryBox">
        <div class="subCategory">Character(s)</div>
        <div class="subCategoryDesc">Fill in the fields.</div>
      </div>
      {
        groupedConfig["request_detailing"] &&
          groupedConfig["request_detailing"].map((config, idx) => (
            <>
              {/* radios components ommitted */}

              {/* insert subcat on cardConfig id */}
              {/* do mind this will only put them BEFORE the target id card */}
              {config.id === "request_text" && (
                <div class="subCategoryBox">
                  <div class="subCategory">Request</div>
                  <div class="subCategoryDesc">Fill in the field.</div>
                </div>
              )}

              {/* templates */}

              {config.type === "fileUpload" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "File upload component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <div
                    class="elDropZone dropzone"
                    id={`dropZone_${config.id}`}
                    data-config-id={config.id}
                  />
                  <span class="purge" class={config.id} />
                  <span
                    class="validFileInfo"
                    set:html={
                      `<span class="b7" id="errReason-fileType">(.png, .jpg, .jpeg)</span> && <span class="b7" id="errReason-fileSize">20MB max</span>` +
                      (config.maxFiles
                        ? ` && <span class="b7" id="errReason-fileCount">Max files: ${config.maxFiles}</span>`
                        : "")
                    }
                  />
                </div>
              )}
              {config.type === "textarea" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <textarea
                    class="formTextInput"
                    id={config.id}
                    name={config.id}
                    placeholder={config.placeholder || ""}
                    required={config.required}
                  />
                </div>
              )}
              {config.type === "infoCard" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                  </div>
                  <div
                    class="textAreaDesc infoCard"
                    set:html={config.questionDescription || ""}
                  />
                </div>
              )}
            </>
          ))
      }

      {/* Contacts */}
      <div class="categoryLabel">Contacts</div>
      <hr />
      <div class="subCategoryBox">
        <div class="subCategory">Interaction Endpoints</div>
        <div class="subCategoryDesc">Fill in the fields.</div>
      </div>
      {
        groupedConfig["contacts"] &&
          groupedConfig["contacts"].map((config, idx) => (
            <>
              {/* radios components ommitted */}
              {/* fileUpload components ommitted */}

              {/* templates */}

              {config.type === "textarea" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <textarea
                    class="formTextInput"
                    id={config.id}
                    name={config.id}
                    placeholder={config.placeholder || ""}
                    required={config.required}
                  />
                </div>
              )}
            </>
          ))
      }
      <button class="submitButtons sbBottom" type="button" id="proceedBtn">
        <span class="submitString">Submit</span>
        <div class="configIco material-symbols-rounded">priority</div>
      </button>
    </form>

    <!-- Expanded Overview -->
    <div id="infobox">
      <div id="backB" class="material-symbols-rounded">arrow_back</div>
      <div class="infocell1">
        <div class="typeTitle">{cardData.title}</div>
        <div class="description" set:html={cardData.description} />
        <div class="tags">
          {
            cardData.tags.map((tag) => (
              <span class={`tag ${getTagClass(tag)}`}>{tag}</span>
            ))
          }
        </div>
        <div class="priceBox">
          <span class="startsFrom">Starts from...</span>
          <div class="price">{priceState}</div>
        </div>
        <div class={cardData.isDisabled ? "disabled" : ""} id="startConfig">
          {configButtonText}
          <div class="configIco material-symbols-rounded">
            arrow_circle_right
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="configSummary">
  <span id="confirmText">Make sure you picked something you want!</span>

  <div id="pickedConfigGrid">
    <!-- inject on every surface key in submitted form data -->
    <!-- just append strings from form data-->

    <!-- template -->
    <div class="formComponent">
      <div class="ocHeader">
        <div class="ocCell1">
          <div class="optionTitle">Empty</div>
        </div>
      </div>
      <div class="optionDesc">Empty</div>
    </div>
    <div class="formComponent">
      <div class="ocHeader">
        <div class="ocCell1">
          <div class="optionTitle longTextTitle">Empty</div>
        </div>
      </div>
      <div class="optionDesc longText">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis eos
        hic nostrum!
      </div>
    </div>
  </div>

  <div id="confirmButtons">
    <div id="summary-cancelConfirm">Go back</div>
    <div id="summary-proceed">Yes, I'm sure.</div>
  </div>

  <div id="loadAnim">
    <div class="gradOverflow">
      <div id="gradbar"></div>
    </div>
    <div id="loadStatString">loading nothing..?</div>
  </div>
</div>

<script>
  import { cardList } from "../../data/cardData";
  import initConfigPageLogic from "./configMonoScript";

  type CardIds = keyof typeof cardList;

  const configWrapper = document.getElementById("configWrap");
  const lookupConfigId = configWrapper?.dataset.configureId as CardIds;
  const cardData = cardList[lookupConfigId];

  if (!lookupConfigId) {
    throw new Error("Missing or invalid dataset on #configWrap");
  }

  initConfigPageLogic(cardData);
</script>
