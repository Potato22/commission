---
import "../../styles/root.scss";
import "../../styles/dz.scss";
import "../../styles/formComponent.scss";
import { cardList } from "../../data/cardData";
import type { FormQuestion } from "../../data/cardData";
import { bodyTypes } from "../../data/cardData";

import noImgPlchldr from "../../assets/noImg.svg";

const cardId = "headshot";
const cardData = cardList[cardId];

function getTagClass(tag: string) {
  const tagString = tag.toLowerCase();
  if (tagString === "best selling") return "tag-bs";
  if (bodyTypes.includes(tagString)) return "tag-btype";
  return "";
}

const priceState = cardData.isDisabled
  ? "n/a"
  : "€" + cardData.price.toFixed(0);
const configButtonText = cardData.isDisabled ? "Ha. nerd." : "Configure";

// Group configData by category
function groupByCategory(
  configData: FormQuestion[] = []
): Record<string, FormQuestion[]> {
  if (!configData) return {};
  return configData.reduce(
    (acc, item) => {
      if (!acc[item.category]) acc[item.category] = [];
      acc[item.category].push(item);
      return acc;
    },
    {} as Record<string, FormQuestion[]>
  );
}

function assertSingleFileUpload(configData: FormQuestion[] = []) {
  const fileUploadCount = configData.filter(
    (q) => q.type === "fileUpload"
  ).length;
  if (fileUploadCount > 1) {
    throw new Error(
      `Dropzone only can be instanced >>once<< inside a form. Found: ${fileUploadCount} || This is what you get for using Dropzone`
    );
  }
}
assertSingleFileUpload(cardData.configData ?? []);

const groupedConfig = groupByCategory(cardData.configData ?? []);
---

<div class="configWrap">
  <div class="" id="configStatus">
    <div class="stCell1">
      <div class="stTitle">*{cardData.title}</div>
      <div class="stDesc">{cardData.description}</div>
    </div>
    <div class="stCell2">
      <div class="stPricebox">
        <span class="estSpan">Est. Price</span>
        <div class="numeros">
          <div id="priceCalc">€{cardData.price}</div>
        </div>
      </div>
      <div
        class="disclaimer"
        aria-label="Estimation only calculates the >>base<< prices of all available options"
      >
        <span class="disclaimerIco material-symbols-rounded">info</span>
      </div>
      <button
        class="submitButtons"
        type="button"
        id="buttonLink"
        onclick="document.getElementById('proceedBtn').click()"
      >
        <span class="submitString">Submit</span>
        <div class="configIco material-symbols-rounded">priority</div>
      </button>
      <div id="cancel" class="material-symbols-rounded">close</div>
    </div>
  </div>
  <div class="cardBody" id={cardId} transition:name={`cardIMGG-${cardId}`}>
    <div class="imgGrid">
      <div class="imgContainer" id="imageGridDefault">
        <img
          src={cardData.images[0].src}
          alt={cardData.images[0].alt ?? "Image"}
          class="img"
          style={cardData.images[0].pos
            ? `object-position:${cardData.images[0].pos}`
            : cardData.images[0].style}
        />
      </div>
      <div class="imgContainer">
        <img
          src={cardData.images[1].src}
          alt={cardData.images[1].alt ?? "Image"}
          class="img"
          style={cardData.images[1].pos
            ? `object-position:${cardData.images[1].pos}`
            : cardData.images[1].style}
        />
      </div>
      <div class="imgContainer">
        <img
          src={cardData.images[2].src}
          alt={cardData.images[2].alt ?? "Image"}
          class="img"
          style={cardData.images[2].pos
            ? `object-position:${cardData.images[2].pos}`
            : cardData.images[2].style}
        />
      </div>
      <div class="imgContainer">
        <img
          src={cardData.images[3].src}
          alt={cardData.images[3].alt ?? "Image"}
          class="img"
          style={cardData.images[3].pos
            ? `object-position:${cardData.images[3].pos}`
            : cardData.images[3].style}
        />
      </div>
    </div>

    <form id="configWindow">
      {/* General Configurations */}
      <div class="categoryLabel">General Configurations</div>
      <hr />
      {
        groupedConfig["general-configurations"] &&
          groupedConfig["general-configurations"].map((config, idx: number) => (
            <>
              {config.subCategory === "characterRender" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    Character Detail{" "}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">Choose an option.</div>
                </div>
              )}
              {config.subCategory === "bodyForm" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    Anthro?{" "}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">Choose an option.</div>
                </div>
              )}
              {config.subCategory === "background" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    Background Art{" "}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">
                    Choose an option.{" "}
                    <i>
                      (Some options are hidden depending the selected "Character
                      Detail")
                    </i>
                  </div>
                </div>
              )}
              {config.subCategory === "nsfw" && (
                <div class="subCategoryBox">
                  <div class="subCategory">
                    NSFW?
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div class="subCategoryDesc">Choose an option.</div>
                </div>
              )}

              {/* templates */}
              {config.type === "singleChoice" &&
                config.options &&
                config.options.map((opt, optIdx) => (
                  <label
                    class={`formComponent${opt.visibleIf ? " conditionalOpt" : ""}`}
                    data-visible-if={
                      opt.visibleIf ? JSON.stringify(opt.visibleIf) : ""
                    }
                    style={opt.visibleIf ? "display:none;" : ""}
                    id={`${config.id}_${optIdx}_wrapper`}
                  >
                    <div class="ocHeader">
                      <div class="ocCell1">
                        <input
                          type="radio"
                          name={config.id}
                          id={`${config.id}_${optIdx}`}
                          value={opt.optionName}
                          required={config.required}
                          checked={!!opt.preChecked}
                        />
                        <span class="customRadio" />
                        <div class="optionTitle">
                          {opt.optionName ? opt.optionName : "?"}
                        </div>
                      </div>
                      <div class="optionValue">
                        {opt.optionPrice == null || opt.optionPrice === 0
                          ? "init"
                          : opt.basePrice //elseif
                            ? "€" + opt.optionPrice
                            : "+€" + opt.optionPrice}
                      </div>
                    </div>
                    <div class="optionDesc" set:html={opt.optionDescription} />
                  </label>
                ))}

              {config.type === "flipflop" &&
                config.options &&
                config.options.length === 2 && (
                  <div class="flipflopBox">
                    {config.options.map((opt, optIdx) => (
                      <label class="formComponent flipflop">
                        <input
                          type="radio"
                          name={config.id}
                          id={`${config.id}_${optIdx}`}
                          value={opt.optionName}
                          checked={!!opt.preChecked}
                        />
                        <div class="flipflopHeader">
                          <div class="optionTitle">
                            {opt.optionName ? opt.optionName : "?"}
                          </div>
                          <div class="optionValue">
                            {opt.optionPrice == null || opt.optionPrice === 0
                              ? ""
                              : opt.basePrice //elseif
                                ? "€" + opt.optionPrice
                                : "+€" + opt.optionPrice}
                          </div>
                        </div>
                        <div class="optionDesc">{opt.optionDescription}</div>
                      </label>
                    ))}
                  </div>
                )}

              {config.type === "textarea" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <textarea
                    class="formTextInput"
                    id={config.id}
                    name={config.id}
                    placeholder={config.placeholder || ""}
                    required={config.required}
                  />
                </div>
              )}

              {/* infocard ommitted  */}
              {/* uploader ommitted  */}
            </>
          ))
      }

      {/* Request Detailing */}
      <div class="categoryLabel">Request Detailing</div>
      <hr />
      <div class="subCategoryBox">
        <div class="subCategory">Character(s)</div>
        <div class="subCategoryDesc">Fill in the fields.</div>
      </div>
      {
        groupedConfig["request-detailing"] &&
          groupedConfig["request-detailing"].map((config, idx) => (
            <>
              {/* radios components ommitted */}

              {/* insert subcat on cardConfig id */}
              {/* do mind this will only put them BEFORE the target id card */}
              {config.id === "request-text" && (
                <div class="subCategoryBox">
                  <div class="subCategory">Request</div>
                  <div class="subCategoryDesc">Fill in the field.</div>
                </div>
              )}

              {/* templates */}

              {config.type === "fileUpload" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "File upload component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <div
                    class="elDropZone dropzone"
                    id={`dropZone_${config.id}`}
                    data-config-id={config.id}
                  />
                  <span class="purge" class={config.id} />
                  <span
                    class="validFileInfo"
                    set:html={
                      `<span class="b7" id="errReason-fileType">(.png, .jpg, .jpeg)</span> && <span class="b7" id="errReason-fileSize">20MB max</span>` +
                      (config.maxFiles
                        ? ` && <span class="b7" id="errReason-fileCount">Max files: ${config.maxFiles}</span>`
                        : "")
                    }
                  />
                </div>
              )}
              {config.type === "textarea" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <textarea
                    class="formTextInput"
                    id={config.id}
                    name={config.id}
                    placeholder={config.placeholder || ""}
                    required={config.required}
                  />
                </div>
              )}
              {config.type === "infoCard" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                  </div>
                  <div
                    class="textAreaDesc infoCard"
                    set:html={config.questionDescription || ""}
                  />
                </div>
              )}
            </>
          ))
      }

      {/* Contacts */}
      <div class="categoryLabel">Contacts</div>
      <hr />
      <div class="subCategoryBox">
        <div class="subCategory">Interaction Endpoints</div>
        <div class="subCategoryDesc">Fill in the fields.</div>
      </div>
      {
        groupedConfig["contacts"] &&
          groupedConfig["contacts"].map((config, idx) => (
            <>
              {/* radios components ommitted */}
              {/* fileUpload components ommitted */}

              {/* templates */}

              {config.type === "textarea" && (
                <div class="formComponent notLabel">
                  <div class="textAreaTitle">
                    {config.questionTitle || "Text area component"}
                    {config.required && (
                      <span style="color: var(--accent)">*</span>
                    )}
                  </div>
                  <div
                    class="textAreaDesc"
                    set:html={config.questionDescription || ""}
                  />
                  <textarea
                    class="formTextInput"
                    id={config.id}
                    name={config.id}
                    placeholder={config.placeholder || ""}
                    required={config.required}
                  />
                </div>
              )}
            </>
          ))
      }
      <button class="submitButtons sbBottom" type="button" id="proceedBtn">
        <span class="submitString">Submit</span>
        <div class="configIco material-symbols-rounded">priority</div>
      </button>
    </form>

    <!-- Expanded Overview -->
    <div id="infobox">
      <div id="backB" class="material-symbols-rounded">arrow_back</div>
      <div class="infocell1">
        <div class="typeTitle">{cardData.title}</div>
        <div class="description" set:html={cardData.description} />
        <div class="tags">
          {
            cardData.tags.map((tag) => (
              <span class={`tag ${getTagClass(tag)}`}>{tag}</span>
            ))
          }
        </div>
        <div class="priceBox">
          <span class="startsFrom">Starts from...</span>
          <div class="price">{priceState}</div>
        </div>
        <div class={cardData.isDisabled ? "disabled" : ""} id="startConfig">
          {configButtonText}
          <div class="configIco material-symbols-rounded">
            arrow_circle_right
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="configSummary">
  <span id="confirmText">Make sure you picked something you want!</span>

  <div id="pickedConfigGrid">
    <!-- inject on every surface key in submitted form data -->
    <!-- just append strings from form data-->

    <!-- template -->
    <div class="formComponent">
      <div class="ocHeader">
        <div class="ocCell1">
          <div class="optionTitle">Empty</div>
        </div>
      </div>
      <div class="optionDesc">Empty</div>
    </div>
    <div class="formComponent">
      <div class="ocHeader">
        <div class="ocCell1">
          <div class="optionTitle longTextTitle">Empty</div>
        </div>
      </div>
      <div class="optionDesc longText">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis eos
        hic nostrum!
      </div>
    </div>
  </div>

  <div id="confirmButtons">
    <div id="summary-cancelConfirm">Go back</div>
    <div id="summary-proceed">Yes, I'm sure.</div>
  </div>

  <div id="loadAnim">
    <div class="gradOverflow">
      <div class="gradbar"></div>
    </div>
  </div>
</div>

<script>
  import Dropzone from "dropzone";
  import { cardList } from "../../data/cardData";
  import { navigate } from "astro:transitions/client";
  const cardId = "headshot";
  const cardData = cardList[cardId];

  function initDz() {
    const dzConfigFileSize: number = 19;

    cardData.configData?.forEach((config) => {
      if (config.type === "fileUpload") {
        const dzElem = document.getElementById(`dropZone_${config.id}`);
        const validityInfo = document.querySelector(".validFileInfo");
        const fileTypeSpan = document.getElementById("errReason-fileType");
        const fileSizeSpan = document.getElementById("errReason-fileSize");
        const fileCountSpan = document.getElementById("errReason-fileCount");
        if (dzElem) {
          new Dropzone(dzElem, {
            url: "#",
            autoProcessQueue: false,
            maxFiles: config.maxFiles ? config.maxFiles : 0,
            maxFilesize: dzConfigFileSize, //IT'S FUCKING MEGABYTES NOT "BYTES" WHO WROTE THE FUCKING DOC
            acceptedFiles: ".png,.jpg,.jpeg",
            addRemoveLinks: true,
            dictDefaultMessage: "upload_file",
            dictRemoveFile: "Remove",

            //// Optional: handle events, e.g. to update fileNameList
            init: function () {
              this.on("maxfilesexceeded", function (this: Dropzone, file) {
                this.removeFile(file);
                dzElem.classList.add("errNudge");
                fileCountSpan?.classList.add("errCulprit");
                setTimeout(() => {
                  dzElem.classList.remove("errNudge");
                  fileCountSpan?.classList.remove("errCulprit");
                }, 500);
              });
              this.on("addedfile", function (this: Dropzone, file) {
                if (file.size > dzConfigFileSize * 1024 * 1024) {
                  this.removeFile(file);
                  dzElem.classList.add("errNudge");
                  fileSizeSpan?.classList.add("errCulprit");
                  setTimeout(() => {
                    dzElem.classList.remove("errNudge");
                    fileSizeSpan?.classList.remove("errCulprit");
                  }, 500);
                  return;
                } else if (
                  !["image/png", "image/jpeg", "image/jpg"].includes(file.type)
                ) {
                  this.removeFile(file);
                  dzElem.classList.add("errNudge");
                  fileTypeSpan?.classList.add("errCulprit");
                  setTimeout(() => {
                    dzElem.classList.remove("errNudge");
                    fileTypeSpan?.classList.remove("errCulprit");
                  }, 500);
                  return;
                } else {
                  dzElem.classList.add("drop");
                  setTimeout(() => {
                    dzElem.classList.remove("drop");
                  }, 400);
                }
              });
              //this.on("error", function (this: Dropzone, file) {
              //  this.removeFile(file);
              //  dzElem.classList.add("errNudge");
              //  fileTypeSpan?.classList.add("errCulprit");
              //});
              this.on("addedfile", (file) => {});
            },
          });
          const injectGoogleIcon = dzElem.querySelector(".dz-button");
          if (injectGoogleIcon) {
            injectGoogleIcon.classList.add("material-symbols-rounded");
          }
        }
      }
    });
  }

  function updateConditionalOptions() {
    // Find all conditional options
    document.querySelectorAll(".conditionalOpt").forEach((elem) => {
      const elAsHTML = elem as HTMLElement;
      const visibleIf = elAsHTML.getAttribute("data-visible-if") as string;
      if (!visibleIf) return;
      try {
        const cond = JSON.parse(visibleIf);
        // Find the radio group for the controlling question
        const selected = document.querySelector(
          `input[name="${cond.questionId}"]:checked`
        ) as HTMLInputElement;

        let shouldShow = false;
        if (selected) {
          if (Array.isArray(cond.value)) {
            shouldShow = cond.value.includes(selected.value);
          } else {
            shouldShow = selected.value === cond.value;
          }
        }
        if (shouldShow) {
          elAsHTML.style.display = "";
        } else {
          elAsHTML.style.display = "none";
          // Optionally, uncheck if hidden
          const input = elAsHTML.querySelector('input[type="radio"]');
          if (input) (input as HTMLInputElement).checked = false;
        }
      } catch (e) {}
    });
  }
  updateConditionalOptions();

  function setupFormValidation() {
    const configForm = document.getElementById(
      "configWindow"
    ) as HTMLFormElement;
    const checkPulse = document.getElementById(
      "proceedBtn"
    ) as HTMLButtonElement;

    // Track already validated fields to avoid duplicate error messages
    const validatedFields = new Set();

    // Create a container for error messages
    const errorContainer = document.createElement("div");
    errorContainer.className = "formInvalidErr";

    configForm.insertBefore(errorContainer, checkPulse);

    return {
      validate: (event: Event) => {
        // Clear previous error messages
        errorContainer.innerHTML = "";
        let hasErrors = false;

        // Find all required radio button groups
        const radioGroups: Record<string, HTMLInputElement[]> = {};
        configForm
          .querySelectorAll('input[type="radio"][required]')
          .forEach((radio) => {
            const name = (radio as HTMLInputElement).getAttribute(
              "name"
            ) as string;
            if (!radioGroups[name]) {
              radioGroups[name] = [];
            }
            radioGroups[name].push(radio as HTMLInputElement);
          });

        // Check each radio group
        Object.entries(radioGroups).forEach(([name, radios]) => {
          // Check if any radio in this group is checked
          const isChecked = radios.some((radio) => radio.checked);

          if (!isChecked) {
            hasErrors = true;

            // Find section name for better error message
            let sectionName: string = name;
            const formComponent = radios[0].closest(".formComponent");
            const parentElement = formComponent
              ? formComponent.parentElement
              : null;
            const subCategoryEl = parentElement
              ? parentElement.previousElementSibling
              : null;
            if (
              subCategoryEl &&
              subCategoryEl.classList.contains("subCategoryBox")
            ) {
              const subCatTitle = subCategoryEl.querySelector(".subCategory");
              if (subCatTitle && subCatTitle.textContent !== null) {
                sectionName = subCatTitle.textContent;
              }
            }

            // Add error message
            const errorMsg = document.createElement("div");
            errorMsg.innerHTML = `Nothing is selected in <span class="b7">${sectionName}</span> !`;
            errorMsg.className = "errBlob";
            errorContainer.appendChild(errorMsg);

            // Scroll to the first error
            if (!validatedFields.has(name)) {
              const formComponent = radios[0].closest(".formComponent");
              formComponent?.scrollIntoView({
                behavior: "smooth",
                block: "center",
              });
              validatedFields.add(name);
            }
          }
        });

        // Check required text areas
        configForm.querySelectorAll("textarea[required]").forEach((elem) => {
          const textarea = elem as HTMLTextAreaElement;
          if (!textarea.value.trim()) {
            hasErrors = true;

            // Find the textarea title for better error message
            const textAreaTitle = (
              textarea.parentElement?.querySelector(
                ".textAreaTitle"
              ) as HTMLElement
            )?.textContent?.replace(" *", "");

            const errorMsg = document.createElement("div");
            errorMsg.innerHTML = `<span class="b7">${textAreaTitle}</span> is required!`;
            errorMsg.className = "errBlob";
            errorContainer.appendChild(errorMsg);

            // Scroll to the first error
            if (!validatedFields.has(textarea.id)) {
              textarea.scrollIntoView({ behavior: "smooth", block: "center" });
              validatedFields.add(textarea.id);
            }
          }
        });
        if (hasErrors) {
          event.preventDefault();
        }
        cardData.configData?.forEach((config) => {
          if (config.type === "fileUpload" && config.required) {
            const dzElem = document.getElementById(`dropZone_${config.id}`);
            if (dzElem && dzElem.dropzone) {
              const dzFiles = dzElem.dropzone.getAcceptedFiles();
              if (dzFiles.length === 0) {
                hasErrors = true;
                const errorMsg = document.createElement("div");
                errorMsg.innerHTML = `<span class="b7">${config.questionTitle || config.id}</span> is required!`;
                errorMsg.className = "errBlob";
                errorContainer.appendChild(errorMsg);
                dzElem.scrollIntoView({ behavior: "smooth", block: "center" });
              }
            }
          }
        });

        if (hasErrors) {
          return { isValid: false };
        }

        // If we get here, all required fields are valid
        // Collect data only after successful validation
        const formData = new FormData(configForm);

        // Return both the processed data object and the form data
        return { isValid: true, formData };
      },
    };
  }

  function submitter(configFormElem?: HTMLFormElement) {
    /** @type {Record<string, string | File | File[]>} */

    const data: Record<string, string | number | File | File[]> = {};
    const formData = new FormData(configFormElem);

    setupFormValidation();

    // Get cardData from wherever it's defined in your component
    // For example, it might be passed as a prop or defined in the script

    // Collect all normal fields
    if (cardData.configData) {
      for (const field of cardData.configData) {
        const value = formData.getAll(field.id);
        if (value.length > 1) {
          data[field.id] = value.filter((v) => v instanceof File);
        } else if (value[0] instanceof File) {
          data[field.id] = value[0];
        } else if (value[0] != null) {
          data[field.id] = value[0].toString();
        }
      }
    }

    // Collect files from Dropzone instances
    cardData.configData?.forEach((config) => {
      if (config.type === "fileUpload") {
        const dzElem = document.getElementById(`dropZone_${config.id}`);
        if (dzElem && dzElem.dropzone) {
          const dzFiles = dzElem.dropzone.getAcceptedFiles();
          if (dzFiles.length > 0) {
            dzFiles.forEach((file) => {
              formData.append(config.id, file, file.name);
            });
            data[config.id] = dzFiles.length === 1 ? dzFiles[0] : dzFiles;
          }
        }
      }
    });

    data.calculatedPrice = priceAdd;
    formData.append("estPrice", priceAdd.toString());

    //console.log("Collected config data:", data);

    // Return both the processed data object and the FormData
    return { data, formData };
  }

  function initPseudoSubmit() {
    // FORM PACKAGING
    const configForm = document.getElementById(
      "configWindow"
    ) as HTMLFormElement;
    const proceedBtn = document.getElementById(
      "proceedBtn"
    ) as HTMLButtonElement;

    //reminder: HI HELLO THE ORIGINAL BUTTON IS NO LONGER SUBMIT TYPE
    proceedBtn.addEventListener("click", function (event) {
      //configForm.addEventListener("submit", async (event: Event) => {

      const { validate } = setupFormValidation();

      const result = validate(event);

      if (!result.isValid) {
        event.preventDefault();
        return;
      }

      // Now we can safely collect the data
      const { data } = submitter(configForm);

      // dropzone check had to be moved here
      let dzHasErrors = false;
      const errorContainer =
        document.querySelector(".formInvalidErr") ||
        (() => {
          const divElem = document.createElement("div");
          divElem.className = "formInvalidErr";
          configForm.insertBefore(
            divElem,
            document.getElementById("submitBtn")
          );
          return divElem;
        })();
      errorContainer.innerHTML = "";

      cardData.configData?.forEach((config) => {
        if (config.type === "fileUpload" && config.required) {
          const dzElem = document.getElementById(`dropZone_${config.id}`);
          if (dzElem && dzElem.dropzone) {
            const dzFiles = dzElem.dropzone.getAcceptedFiles();
            if (dzFiles.length === 0) {
              dzHasErrors = true;
              const errorMsg = document.createElement("div");
              errorMsg.innerHTML = `<span class="b7">${config.questionTitle || config.id}</span> is required!`;
              errorMsg.className = "errBlob";
              errorContainer.appendChild(errorMsg);
              dzElem.scrollIntoView({ behavior: "smooth", block: "center" });
            }
          }
        }
      });

      if (dzHasErrors || !configForm.checkValidity()) {
        event.preventDefault();
        return;
      }

      summaryDisplayControl("open", data);
    });
  }
  //summaryDisplayControl("open");

  function generateSummary(
    formData: Record<string, string | number | File | File[]>,
    targetElement: HTMLElement
  ) {
    // Safety check for formData
    if (!formData || typeof formData !== "object") {
      console.error("Invalid form data provided to generateSummary");
      return;
    }
    // Clear existing content
    targetElement.innerHTML = "";

    // Define which keys to display and their display names
    const keysToDisplay = {
      "character-detail": "Character Detail",
      anthro: "Anthro?",
      background: "Background Art",
      nsfw: "NSFW?",
      "request-text": "Request",
      contacts: "Contact Information",
    };

    // Generate HTML for each key
    for (const [key, displayName] of Object.entries(keysToDisplay)) {
      if (formData[key]) {
        const fragment = createSummaryFragment(
          displayName,
          String(formData[key])
        );
        targetElement.appendChild(fragment);
      }
    }

    // Add image count if there are character references
    if (formData["character-reference"]) {
      let imageCount = 0;

      if (Array.isArray(formData["character-reference"])) {
        // Multiple images case
        imageCount = formData["character-reference"].length;
      } else {
        // Single image case
        imageCount = 1;
      }

      const fragment = createSummaryFragment(
        "Reference Images",
        `${imageCount} image${imageCount !== 1 ? "s" : ""}`
      );
      targetElement.appendChild(fragment);
    }

    // Add price if available
    if (formData["calculatedPrice"]) {
      const fragment = createSummaryFragment(
        "Estimated Price",
        `$${formData["calculatedPrice"]}`
      );
      targetElement.appendChild(fragment);
    }
  }

  function createSummaryFragment(title: string, value: string) {
    const template = document.createElement("template");
    template.innerHTML = `
    <div class="formComponent">
      <div class="ocHeader">
        <div class="ocCell1">
          <div class="optionTitle ${title === "Request" ? "longTextTitle" : ""}">${title}</div>
        </div>
      </div>
      <div
        class="optionDesc ${title === "Request" ? "longText" : ""}"
        >${value}</div>
    </div>
  `;
    return template.content;
  }

  function summaryDisplayControl(
    mode: string | null,
    appendedFormData: Record<string, string | number | File | File[]> | null
  ) {
    console.log("summaryDisplayControl:", mode);

    const summaryWindow = document.getElementById(
      "configSummary"
    ) as HTMLElement;
    const summaryButtons = document.getElementById(
      "confirmButtons"
    ) as HTMLElement;
    const summaryHeading = document.getElementById(
      "confirmText"
    ) as HTMLElement;
    const summaryGrid = document.getElementById(
      "pickedConfigGrid"
    ) as HTMLElement;
    const loadAnim = document.getElementById("loadAnim") as HTMLElement;


    const configForm = document.getElementById(
      "configWindow"
    ) as HTMLFormElement;

    const { data } = submitter(configForm);

    switch (mode) {
      case "open":
        summaryDisplayControl("reset", {});
        initSummaryButtons();

        // Generate summary content if appendedFormData is provided
        if (appendedFormData) {
          generateSummary(appendedFormData, summaryGrid);
        }

        summaryWindow.style.display = "flex";
        setTimeout(() => {
          summaryWindow.classList.add("active");
        }, 10);
        break;
      case "close":
        summaryButtons.style.opacity = "0";
        summaryButtons.style.transform = "translateY(2em)";
        setTimeout(() => {
          summaryWindow.classList.remove("active");
          setTimeout(() => {
            summaryWindow.style.display = "none";
          }, 300);
        }, 300);
        break;
      case "proceed":
        summaryHeading.style.opacity = "0";
        summaryButtons.style.opacity = "0";
        summaryGrid.style.opacity = "0";
        summaryButtons.style.transform = "translateY(2em)";
        setTimeout(() => {
          loadAnim.style.display = "flex";

          setTimeout(() => {
            summaryDisplayControl("close", {});
            setTimeout(() => {
              // Form submission would happen here
              configDisplayControl(false);
              console.log("appendedFormData:", data);

              //alert("Dead end");
            }, 500);
          }, 2000);
        }, 300);
        break;
      case "reset":
        loadAnim.style.display = "none";
        summaryHeading.style.opacity = "1";
        summaryButtons.style.opacity = "1";
        summaryButtons.style.transform = "";
        summaryGrid.style.opacity = "1";
        break;
      default:
        break;
    }
  }

  function initSummaryButtons() {
    const goBack = document.getElementById(
      "summary-cancelConfirm"
    ) as HTMLElement;
    const iAmSure = document.getElementById("summary-proceed") as HTMLElement;
    goBack.addEventListener("click", () => summaryDisplayControl("close", {}));
    iAmSure.addEventListener("click", () =>
      summaryDisplayControl("proceed", {})
    );
  }

  let priceAdd: number = 0;

  function animateNumber(
    elem: HTMLElement,
    start: number,
    end: number,
    duration = 500
  ) {
    const startTime = performance.now();

    function update(currentTime: number) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      // Linear interpolation (lerp)
      const value = Math.round(start + (end - start) * progress);
      elem.textContent = `€${value.toFixed(2)}`;

      if (progress < 1) {
        requestAnimationFrame(update);
      }
    }
    requestAnimationFrame(update);
  }

  let lastPrice = cardData.price;

  function updatePrice() {
    const priceElem = document.getElementById("priceCalc");
    if (priceElem) {
      //const newPrice = cardData.price + priceAdd;
      const newPrice = 0 + priceAdd;
      animateNumber(priceElem, lastPrice, newPrice, 400);
      lastPrice = newPrice;
    }
  }

  /**
   * @param { { id: string; options?: { optionName: string; optionPrice: number }[] } } config
   * @param {HTMLElement} form
   */
  function getSelectedOptionPrice(
    config: {
      id: string;
      options?: { optionName: string; optionPrice: number }[];
    },
    form: HTMLElement
  ) {
    if (!config.options) return 0;
    // For radio/flipflop, find the checked input
    const selected = form.querySelector(`input[name="${config.id}"]:checked`);
    if (!selected) return 0;
    const selectedValue = (selected as HTMLInputElement).value;
    const found = config.options.find(
      (opt) => opt.optionName === selectedValue
    );
    return found ? found.optionPrice : 0;
  }

  function recalculatePrice() {
    const configForm = document.getElementById("configWindow");
    let totalAdd = 0;
    if (cardData.configData && configForm) {
      cardData.configData.forEach((config) => {
        if (config.type === "singleChoice" || config.type === "flipflop") {
          totalAdd += getSelectedOptionPrice(config, configForm);
        }
      });
    }
    priceAdd = totalAdd;
    updatePrice();
  }

  function initPriceCalc() {
    const configForm = document.getElementById("configWindow");
    if (configForm) {
      configForm.addEventListener("change", recalculatePrice);
    }
    recalculatePrice();
  }

  function initbackButton() {
    const back = document.getElementById("backB") as HTMLElement;
    back.addEventListener("click", () => {
      //navigate("/");
      const currentPage = window.location.href;

      window.history.back();

      // Give the browser a moment to navigate back
      setTimeout(() => {
        // If we're still on the same page after trying to go back
        if (window.location.href === currentPage) {
          navigate("commission/");
        }
      }, 100);
    });
  }

  function configDisplayControl(command: boolean) {
    const infoBox = document.getElementById("infobox") as HTMLElement;
    const configWindow = document.getElementById("configWindow") as HTMLElement;
    const configStatus = document.getElementById("configStatus") as HTMLElement;
    const cardBody = document.querySelector(".cardBody") as HTMLElement;
    const imgGrid = document.querySelector(".imgGrid") as HTMLElement;
    const startButton = document.getElementById("startConfig") as HTMLElement;

    switch (command) {
      case true:
        infoBox.classList.add("animExit");
        setTimeout(() => {
          infoBox.style.display = "none";
          infoBox.classList.remove("animExit");
          startButton.classList.add("configGo");
          cardBody.classList.add("configuring");
          imgGrid.classList.add("configuring");
          configStatus.classList.add("active");
          configWindow.classList.add("animEnter");
          configWindow.style.display = "block";
          setTimeout(() => {
            configWindow.classList.remove("animEnter");
            infoBox.classList.remove("animExit");
          }, 1);
        }, 300);
        break;
      case false:
        configWindow.classList.add("animExit");
        setTimeout(() => {
          configWindow.style.display = "none";
          startButton.classList.remove("configGo");
          cardBody.classList.remove("configuring");
          imgGrid.classList.remove("configuring");
          configStatus.classList.remove("active");
          infoBox.classList.add("animEnter");
          infoBox.style.display = "flex";
          setTimeout(() => {
            infoBox.classList.remove("animEnter");
            configWindow.classList.remove("animExit");
          }, 1);
        }, 300);
        break;
    }
  }
  function initConfigControl() {
    const startButton = document.getElementById("startConfig") as HTMLElement;
    const close = document.getElementById("cancel") as HTMLElement;

    //skip
    //configuring(true);

    startButton.addEventListener("click", () => {
      configDisplayControl(true);
    });
    close.addEventListener("click", () => {
      configDisplayControl(false);
    });
  }

  function initList() {
    updatePrice();
    initbackButton();
    initPriceCalc();
    setupFormValidation();
    updateConditionalOptions();
    document.querySelectorAll('input[type="radio"]').forEach((input) => {
      input.addEventListener("change", updateConditionalOptions);
    });
    initDz();
    initConfigControl();
    initPseudoSubmit();
    //submitter();
    summaryDisplayControl("", {});
  }

  // rehydraters
  //document.addEventListener("DOMContentLoaded", initList);
  document.addEventListener("astro:page-load", initList);
</script>

<style>
  .animExit {
    opacity: 0;
    transform: translateX(50%);
    transition:
      opacity 0.2s,
      transform 0.2s var(--accel) !important;
  }
  .animEnter {
    animation: fadeIn 0.2s forwards !important;
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  .configWrap {
    display: flex;
    flex-direction: column;
    width: 100vw;
    height: 100vh;
    overflow-y: hidden;
  }
  #configStatus {
    width: 100vw;
    display: flex;
    justify-content: space-between;
    max-height: 0;
    padding: 0;
    min-height: 0;
    overflow: hidden;
    border-bottom: 1px solid var(--fore);
    background: var(--base);
    transition: all 0.2s var(--sleek);
    z-index: 2;
    /* fucking hell */

    &.active {
      padding: 0 1em 1em 1em;
      max-height: 90px;
      min-height: 90px;
      overflow: visible;
    }
  }

  .stCell1 {
    display: flex;
    flex-direction: column;
    color: var(--fore);
  }

  .stTitle {
    font-size: 3rem;
    font-family: var(--doto);
    font-weight: 900;
    color: var(--accent);
  }
  .stDesc {
    font-size: 1rem;
    font-family: var(--content);
  }

  .stCell2 {
    margin-top: 1em;
    display: flex;
    align-items: center;
    color: var(--fore);
  }

  .stPricebox {
    font-family: var(--content);
    & .estSpan {
      font-size: 1rem;
      color: var(--foreSecondary);
    }
    & .numeros {
      font-size: 2rem;
      font-weight: 900;
      font-family: var(--doto);
    }
  }
  .disclaimer {
    height: 100%;
    position: relative;
    display: flex;
    margin-right: 0.3em;
    user-select: none;
    text-align: center;
    line-height: 1.4;
    align-items: flex-end;
    margin-right: 5em;
    margin-left: 1em;
    color: var(--fore);
    font-family: var(--content);
    & .disclaimerIco {
      font-size: 1.7rem;
      transform: translateY(-0.225em);
    }

    &.important {
      color: red;

      &::before {
        background: #ff2929;
      }
    }

    &::before {
      content: attr(aria-label);
      position: absolute;
      background: var(--base);
      transition: all 0.1s 0.3s;
      color: var(--fore);
      font-size: 1rem;
      padding: 0.3em 0.6em;
      border-radius: 12px;
      pointer-events: none;
      user-select: none;
      opacity: 0;
      min-width: 200px;
      z-index: 0;
      box-shadow: rgba(36, 36, 40, 0.377) 0 10px 20px;
      transform: translate(-80%, 40px);
      border: 2px solid var(--fore);
    }

    &:hover::before {
      transform: translate(-80%, 90px);
      opacity: 1;
    }
  }

  #cancel {
    font-size: 3rem;
    cursor: pointer;
    color: var(--fore);
    margin-left: 3em;
    transition:
      color 0.2s var(--sleek),
      transform 0.2s var(--sleek);

    &:hover {
      color: var(--prim);
      transform: scale(1.1);
    }
  }

  .cardBody {
    --cardRounding: 50px;
    --animDur: 0.3s;
    flex: 1; /* This is the critical part - take all remaining space */
    display: flex;
    background-color: var(--base);
    padding: 1rem;
    overflow-y: auto;
    overflow-x: hidden; /* Allow content to scroll if needed */
    transition: width var(--animDur) var(--sleek);
    border-radius: 0px;
    transition:
      background 0.2s var(--sleek),
      border 0.2s var(--sleek),
      padding 0.2s var(--sleek);

    &.configuring {
      padding: 0rem;
    }
  }

  .imgGrid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5em;
    min-width: 50%;
    padding: 0em;
    transition: padding 0.2s var(--sleek);
    &.configuring {
      padding: 1em;
    }
  }

  .imgContainer {
    --imgSize: 100%;
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
    transition: all var(--animDur) var(--sleek);

    --imgGridRounding: calc(var(--cardRounding) / 1.5);
  }

  .imgContainer {
    border-radius: var(--imgGridRounding);
  }

  .img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform var(--animDur) ease-in-out;
  }
  #infobox {
    display: flex;
    justify-content: space-between;
    color: var(--fore);
    padding: 0 1em;
    position: relative;
    transition: color 0.2s var(--sleek);
  }

  #backB {
    color: var(--fore);
    border: 1px solid var(--fore);
    align-self: flex-start;
    font-size: 6rem;
    border-radius: calc(var(--cardRounding) / 1.5);
    transition: all 0.2s var(--sleek);

    &:hover {
      background: var(--prim);
      border-color: var(--prim);
      color: var(--base);
      cursor: pointer;
      border-radius: 10%;
    }
  }

  .infocell1 {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    width: 60%;
  }

  .typeTitle {
    font-size: 6rem;
    font-family: var(--doto);
    font-weight: 900;
    margin-bottom: 0.2em;
  }

  .description {
    font-size: 1.5rem;
    font-family: var(--content);
    font-weight: 300;
  }

  .tags {
    display: flex;
    margin-top: 1em;
    gap: 0.5em;
    flex-wrap: wrap;
    justify-content: flex-end;
  }

  .tag {
    font-family: var(--doto);
    font-weight: 900;
    background: var(--primSecondary);
    color: var(--fore);
    padding: 0.2em 0.8em;
    border-radius: 20px;
    box-sizing: border-box;
    transition:
      background 0.2s var(--sleek),
      color 0.2s var(--sleek);

    &.tag-best {
      background: gold;
      color: black;
    }

    &.tag-btype {
      border: 1px solid var(--primSecondary);
      background: transparent;
      color: var(--accent);
    }
  }

  .infocell2 {
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-end;
    height: 100%;
    margin-right: 1em;
    right: 0;
  }

  .priceBox {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
    font-size: 3rem;
    transition: all var(--animDur) var(--sleek);
    margin-top: 1em;
  }

  .startsFrom {
    font-family: var(--content);
    font-weight: 400;
    font-size: 0.5em;
    color: var(--foreSecondary);
    transform: translateY(-0.7em);
    transition: color 0.2s var(--sleek);
  }

  .price {
    font-family: var(--content);
    font-weight: 900;
    font-size: 2em;
    color: var(--fore);
    transition: color 0.2s var(--sleek);
  }

  #startConfig {
    position: relative;
    display: flex;
    align-items: center;
    font-family: var(--content);
    font-size: 1.3rem;
    background: var(--prim);
    color: var(--fore);
    border: 1px solid var(--base);
    padding: 0.4em 5em;
    border-radius: 25px;
    margin-top: 1em;
    margin-bottom: 0.5em;
    pointer-events: all;
    opacity: 1;
    cursor: pointer;
    font-weight: 700;
    text-align: center;
    transition: all var(--animDur) var(--sleek);

    & .configIco {
      right: 0.1em;
      position: absolute;
      font-size: 1.6em;
      transform: translateX(-2em);
      opacity: 0;
      transition: none;
    }

    &:hover {
      background: transparent;
      color: var(--fore);
      border: 1px solid var(--prim);
      transform: scale(1.05);

      & .configIco {
        opacity: 1;
        transform: translateX(0);
        transition: all var(--animDur) var(--sleek);
      }
    }
    &.disabled {
      background: rgba(0, 0, 0, 0);
      box-sizing: content-box;
      border: 2px solid var(--viscueDisabled);
      color: var(--viscueDisabled);
      pointer-events: none;
      font-size: 1.2rem;
    }
    &.configGo {
      transition: all var(--animDur) var(--sleek);
      opacity: 0;
      pointer-events: none;
    }
  }

  #configWindow {
    width: 100%;
    height: 100%;
    overflow-y: scroll;
    display: none;
    margin-left: 1em;
    padding: 2em 12em;
  }

  .submitButtons {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: var(--content);
    font-size: 1.3rem;
    background: var(--prim);
    color: var(--fore);
    border: 2px solid var(--base);
    padding: 0.4em 5em;
    border-radius: 25px;
    opacity: 1;
    cursor: pointer;
    font-weight: 700;
    transition: all 0.2s var(--sleek);

    &::before {
      content: "Prices calculated here are an estimate, overall request complexity may affect the final price!";
      position: absolute;
      background: var(--base);
      color: var(--fore);
      font-size: 1rem;
      padding: 0.3em 0.6em;
      border-radius: 12px;
      pointer-events: none;
      user-select: none;
      opacity: 0;
      min-width: 200px;
      z-index: 1;
      box-shadow: rgba(36, 36, 40, 0.377) 0 10px 20px;
      transform: translate(00%, 40px);
      transition: all 0.2s var(--accel);
      border: 2px solid var(--fore);
    }

    &.sbBottom::before {
      transform: translate(00%, -40px);
    }

    & .configIco {
      position: absolute;
      font-size: 1.6em;
      opacity: 0;
    }
    &:hover {
      background: transparent;
      border: 2px solid var(--prim);

      & .submitString {
        opacity: 0;
      }

      & .configIco {
        opacity: 1;
        /* transform: translateX(0); */
        transition: all 0.2s var(--sleek);
      }
      &::before {
        transform: translate(00%, 80px);
        opacity: 1;
        transition-timing-function: var(--sleek);
        animation: primSpike 1s;
      }

      &.sbBottom:hover {
        &::before {
          transform: translate(00%, -80px);
          opacity: 1;
        }
      }
    }
  }
  @keyframes primSpike {
    from {
      background: var(--primSecondary);
      border-color: var(--accent);
    }
    to {
      background: var(--base);
      border-color: var(--fore);
    }
  }
  /* eldropzone is in /styles */
</style>
