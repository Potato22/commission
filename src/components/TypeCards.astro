---
interface Props {
  typeTitle: string;
  description: string;
  images: {
    src: string;
    alt: string;
  }[];
  price: string;
  tags: string[];
  isDisabled?: boolean;
  isExpanded?: boolean;
}
const {
  typeTitle,
  description,
  images,
  price,
  tags,
  isDisabled = false,
  isExpanded = false,
} = Astro.props;

if (images.length > 4) {
  throw new Error("Card can only hold 4 images.");
}

const cardId = typeTitle.toLowerCase().replace(/\s+/g, "-");

// Add a placeholder image constant
const PLACEHOLDER_IMAGE = {
  src: "/placeholder.jpg", // Replace with your placeholder image path
  alt: "Placeholder image",
};

// Create an array of exactly 4 images, filling empty slots with placeholders
const displayImages = Array(4)
  .fill(PLACEHOLDER_IMAGE)
  .map((placeholder, index) => images[index] || placeholder);
---

<div class="cardBody" id={cardId} data-typeCard>
  <div class="imgGrid">
    <div class="imgContainer">
      <img src={images[0].src} alt={images[0].alt} class="img" />
    </div>
    <div class="imgContainer">
      <img src={images[1].src} alt={images[1].alt} class="img" />
    </div>
    <div class="imgContainer">
      <img src={images[2].src} alt={images[2].alt} class="img" />
    </div>
    <div class="imgContainer">
      <img src={images[3].src} alt={images[3].alt} class="img" />
    </div>
  </div>
  <div class="infobox">
    <div class="infocel1">
      <div class="typeTitle">{typeTitle}</div>
      <div class="description">{description}</div>
      <div class="tags">
        {tags.map((tag) => <span class="tag">{tag}</span>)}
      </div>
    </div>
    <div class="infocel2">
      <div class="priceBox">
        <span class="startsFrom">Starts from...</span>
        <div class="price">â‚¬{price}</div>
      </div>
      <div class="configureButton">Configure</div>
    </div>
  </div>

  <script>
    // Get all card instances
    const cards = document.querySelectorAll("[data-typeCard]");

    // Add click handler to each card
    cards.forEach((card) => {
      card.addEventListener("click", () => {
        // Close any previously expanded card
        cards.forEach((otherCard) => {
          if (otherCard !== card && otherCard.classList.contains("expanded")) {
            // Remove expanded class from the card
            otherCard.classList.remove("expanded");

            // Remove expanded class from its children
            const imgGrid = otherCard.querySelector(".imgGrid");
            const imgConts = otherCard.querySelectorAll(".imgContainer");
            const infocel2 = otherCard.querySelector(".infocel2");
            const priceBox = otherCard.querySelector(".priceBox");
            const configure = otherCard.querySelector(".configureButton");

            imgGrid?.classList.remove("expanded");
            infocel2?.classList.remove("expanded");
            configure?.classList.remove("expanded");
            imgConts.forEach((cont) => cont.classList.remove("expanded"));
          }
        });

        // Toggle the clicked card
        card.classList.toggle("expanded");

        // Get elements only within this card
        const imgGrid = card.querySelector(".imgGrid");
        const imgConts = card.querySelectorAll(".imgContainer");
        const infocel2 = card.querySelector(".infocel2");
        const priceBox = card.querySelector(".priceBox");
        const configure = card.querySelector(".configureButton");

        // Toggle classes for this card's elements only
        imgGrid?.classList.toggle("expanded");
        infocel2?.classList.toggle("expanded");
        priceBox?.classList.toggle("expanded");
        configure?.classList.toggle("expanded");
        imgConts.forEach((cont) => cont.classList.toggle("expanded"));
      });
    });
  </script>

  <style>
    .cardBody {
      cursor: pointer;
      display: flex;
      width: 50%;
      background-color: var(--base);
      border-radius: 50px;
      padding: 1rem;
      border: 2px solid var(--fore);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      transition: width 0.3s var(--sleek);
      &.expanded {
        width: 70%;
        cursor: zoom-out;
      }
    }

    .infobox {
      display: flex;
      justify-content: space-between;
      width: 100%;
      color: var(--fore);
      padding: 0 1em;
      position: relative;
    }

    .infocel1 {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      max-width: 80%;
    }
    .typeTitle {
      font-size: 3em;
      font-family: var(--display);
      font-weight: 900;
    }
    .description {
      font-size: 1.5em;
      font-family: var(--content);
      font-weight: 400;
    }
    .tags {
      display: flex;
      margin-top: 1em;
      gap: 0.5em;
      flex-wrap: wrap;
    }
    .tag {
      font-family: var(--contentSecondary);
      background: var(--foreSecondary);
      color: var(--base);
      padding: 0.2em 0.8em;
      border-radius: 20px;
    }

    .infocel2 {
      position: absolute;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      align-items: flex-end;
      height: 100%;
      margin-right: 1em;
      right: 0;
    }
    .priceBox {
      display: flex;
      align-items: flex-end;
      justify-content: flex-end;
      font-size: 3em;
      transition: all 0.3s var(--sleek);
      &.expanded {
        font-size: 5em;
      }
    }
    .startsFrom {
      font-family: var(--content);
      font-weight: 400;
      font-size: .3em;
      color: var(--foreSecondary);
      transform: translateY(-0.5em);
    }
    .price {
      font-family: var(--content);
      font-weight: 900;
      font-size: 1em;
      color: var(--foreSecondary);
    }
    .configureButton {
      font-family: var(--content);
      font-weight: 900;
      font-size: 1.3em;
      color: var(--fore);
      background: var(--accent);
      padding: 0.2em 5em;
      border-radius: 25px;
      margin-top: -1em;
      margin-bottom: -0.5em;
      transition: all 0.3s var(--sleek);
      pointer-events: none;
      opacity: 0;
      &:hover {
        background: var(--fore);
        color: var(--base);
        transform: scale(1.05);
        cursor: pointer;
      }
      &.expanded {
        margin-top: 1em;
        margin-bottom: 0.5em;
        pointer-events: all;
        opacity: 1;
      }
    }

    .imgGrid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
    }

    .imgContainer {
      --imgSize: 100px;
      width: var(--imgSize);
      height: var(--imgSize);
      position: relative;
      overflow: hidden;
      transition: all 0.3s var(--sleek);
      &.expanded {
        --imgSize: 300px;
      }

      --imgGridRounding: 25px;
    }
    .imgContainer:nth-child(1) {
      border-radius: var(--imgGridRounding) 0 0 0;
    }
    .imgContainer:nth-child(2) {
      border-radius: 0 var(--imgGridRounding) 0 0;
    }
    .imgContainer:nth-child(3) {
      border-radius: 0 0 0 var(--imgGridRounding);
    }
    .imgContainer:nth-child(4) {
      border-radius: 0 0 var(--imgGridRounding) 0;
    }

    .img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      transition: transform 0.3s ease-in-out;
    }
  </style>
</div>
