---
import noImgPlchldr from "../assets/noImg.svg";
import {
  bodyTypes,
  commState,
  cardList as allCardsData,
} from "../data/cardData";
interface Props {
  typeTitle: string;
  description: string;
  images: {
    src: string;
    alt?: string;
    pos?: string;
    style?: string; //lazy fuck solution
  }[];
  price: number;
  tags: string[];
  isDisabled?: boolean;
}
const {
  typeTitle,
  description,
  images,
  price,
  tags,
  //isDisabled = false,
} = Astro.props;

let internalIsDisabled: boolean;

// Check if the isDisabled prop was explicitly passed
if (Astro.props.isDisabled !== undefined) {
  internalIsDisabled = Astro.props.isDisabled;
} else {
  // If not passed, try to look it up in allCardsData
  const cardKey = typeTitle.toLowerCase().replace(/\s+/g, "");
  const cardDataEntry = allCardsData[cardKey];
  // Use optional chaining and nullish coalescing.
  // If cardDataEntry exists and has isDisabled, use that value.
  // Otherwise, default to false (not disabled).
  internalIsDisabled = (cardDataEntry?.isDisabled || commState.disableInteractivity) ?? false;
}

if (images.length > 4) {
  throw new Error(
    "Card can only hold 4 images." + ` parsed images: ${images.length}`
  );
} else {
  while (images.length < 4) {
    images.push({
      src: noImgPlchldr.src,
      alt: "Failed to load.",
      style: "filter: var(--inverto)",
    });
  }
}
//console.log("Received images:", images, images.length);
//console.log("Image array length:", images.length);
//console.log("Raw props:", Astro.props);

const cardId = typeTitle.toLowerCase().replace(/\s+/g, "");

// Use internalIsDisabled for all dependent constants
const priceState =
  internalIsDisabled || commState.isClosed ? "n/a" : "â‚¬" + price.toFixed(0);
//const interactive = internalIsDisabled || commState.isClosed ? "false" : "true"; // data-interactive
const interactive = internalIsDisabled ? "false" : "true"; // data-interactive

//const bodyTypes = ["pony", "semi-anthro", "anthro"];
function getTagClass(tag: string) {
  const tagString = tag.toLowerCase();
  if (tagString === "best selling") return "tag-bs";
  if (bodyTypes.includes(tagString)) return "tag-btype";
  return "";
}
---

<div
  class=`cardBody`
  id={cardId}
  data-interactive={interactive}
  transition:name={`cardIMGG-${cardId}`}
>
  <div class="imgGrid">
    <div class="imgContainer">
      <img
        loading="lazy"
        src={images[0].src}
        alt={images[0].alt}
        class="img"
        style={images[0].pos
          ? `object-position:${images[0].pos}`
          : images[0].style}
      />
    </div>
    <div class="imgContainer">
      <img
        loading="lazy"
        src={images[1].src}
        alt={images[1].alt}
        class="img"
        style={images[1].pos
          ? `object-position:${images[1].pos}`
          : images[1].style}
      />
    </div>
    <div class="imgContainer">
      <img
        loading="lazy"
        src={images[2].src}
        alt={images[2].alt}
        class="img"
        style={images[2].pos
          ? `object-position:${images[2].pos}`
          : images[2].style}
      />
    </div>
    <div class="imgContainer">
      <img
        loading="lazy"
        src={images[3].src}
        alt={images[3].alt}
        class="img"
        style={images[3].pos
          ? `object-position:${images[3].pos}`
          : images[3].style}
      />
    </div>
  </div>
  <div class="infobox">
    <div class="infocell1">
      <div class="typeTitle">{typeTitle}</div>
      <div class="description" set:html={description} />
      <div class="tags">
        {
          tags.map((tag) => (
            <span class={`tag ${getTagClass(tag)}`}>{tag}</span>
          ))
        }
      </div>
    </div>
    <div class="infocell2">
      <div class="priceBox">
        <span class="startsFrom">Starts from...</span>
        <div class="price">{priceState}</div>
      </div>
      <!-- <div class={`configureButton ${disabled}`}>
        {configButtonText}
      </div> -->
    </div>
  </div>
</div>

<script>
  import { navigate } from "astro:transitions/client";

  // Handle configure button click
  function initNavigate() {
    document.querySelectorAll(`[data-interactive="true"]`).forEach((card) => {
      if (card instanceof HTMLElement) {
        card.addEventListener("click", () => {
          const cardIdPage = card.id;
          //alert(`Configure ${cardIdPage}`);
          //good ol alert debugger
          //navigate(`/config/${cardIdPage}`, {
          //  state: {
          //    // Add any other state you want to pass
          //  },
          //});
          navigate(`config/${cardIdPage}`);
        });
      }
    });
  }
  initNavigate();

  // rehydrater
  document.addEventListener("astro:after-swap", () => {
    initNavigate();
  });
</script>

<style lang="scss">
  @use "../../src/styles/_mixins" as *;
  [data-interactive="false"] {
    filter: grayscale(1);
    opacity: 0.3;
    pointer-events: none;
    cursor: not-allowed;
  }
  .cardBody {
    --cardRounding: 50px;
    --animDur: 0.3s;
    cursor: pointer;
    display: flex;
    width: 50%;
    background-color: var(--accentSecondary);
    padding: 1rem;
    border: 1px solid var(--foreSecondary);
    /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); */
    border-radius: var(--cardRounding);
    transition:
      background 0.2s var(--sleek),
      border 0.2s var(--sleek);

    &.expanded {
      width: 70%;
      cursor: auto;

      & .tag-btype {
        display: block;
        animation: trivialTags var(--animDur) var(--sleek) forwards;
      }
    }
    @include breakpoint(tiny, mobile) {
      width: 95%;
      flex-direction: column;
      padding: 0.5rem;
      text-align: center;
      align-items: center;
    }
    @include breakpoint(tablet) {
      width: 100%;
      align-items: center;
    }
  }

  @keyframes trivialTags {
    0% {
      opacity: 0;
      transform: translateY(0.5em);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .infobox {
    display: flex;
    justify-content: space-between;
    width: 100%;
    color: var(--fore);
    padding: 0 1em;
    position: relative;
    transition: color 0.2s var(--sleek);
    @include breakpoint(tiny, mobile) {
      flex-direction: column;
      align-items: center;
    }
  }

  .infocell1 {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    max-width: 80%;
    @include breakpoint(tiny, mobile) {
      margin-top: 1em;
      max-width: 100%;
      align-items: center;
      font-size: 0.8rem;
      .typeTitle {
        font-size: 2rem;
      }
      .description {
        font-size: 1rem;
      }
    }
  }

  .typeTitle {
    font-size: 3rem;
    font-family: var(--doto);
    font-weight: 900;
  }

  .description {
    font-size: 1.5rem;
    font-family: var(--content);
    font-weight: 300;
    @include breakpoint(tiny, mobile) {
      margin-top: 0.5em;
    }
  }

  .tags {
    display: flex;
    margin-top: 1em;
    gap: 0.5em;
    flex-wrap: wrap;
    @include breakpoint(tiny, mobile) {
      justify-content: center;
      margin-bottom: 2em;
    }
  }

  .tag {
    font-family: var(--doto);
    font-weight: 900;
    background: var(--primSecondary);
    color: var(--fore);
    padding: 0.2em 0.8em;
    border-radius: 20px;
    box-sizing: border-box;
    transition:
      background 0.2s var(--sleek),
      color 0.2s var(--sleek);

    &.tag-best {
      background: gold;
      color: black;
    }

    &.tag-btype {
      border: 1px solid var(--primSecondary);
      background: transparent;
      color: var(--accent);
      display: none;
    }
  }

  .infocell2 {
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-end;
    height: 100%;
    margin-right: 1em;
    right: 0;
    @include breakpoint(tiny, mobile) {
      position: relative;
      margin: 0;
    }
  }

  .priceBox {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
    font-size: 3rem;

    @include breakpoint(tiny, mobile) {
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    &.expanded {
      font-size: 5rem;
    }
  }

  .startsFrom {
    font-family: var(--content);
    font-weight: 400;
    font-size: 0.3em;
    color: var(--foreSecondary);
    transform: translateY(-0.5em);
    transition: color 0.2s var(--sleek);
    @include breakpoint(tiny, mobile, tablet) {
      transform: none;
    }
  }

  .price {
    font-family: var(--content);
    font-weight: 900;
    font-size: 1em; //I know what I'm doing
    color: var(--fore);
    transition: color 0.2s var(--sleek);
  }

  .imgGrid {
    --imgSize: 100px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    place-items: center;
    gap: 0;

    /* transition: all var(--animDur) var(--sleek); */
    /* gap does not support animation (yet) */
    &.expanded {
      gap: 0.5em;
    }
    @include breakpoint(tiny, mobile) {
      --imgSize: 100%;
    }
    @include breakpoint(tablet) {
      max-height: 200px;
      //max-width: 200px;
    }
  }

  .imgContainer {
    --imgGridRounding: calc(var(--cardRounding) - 1em);
    width: var(--imgSize);
    height: var(--imgSize);
    min-width: var(--imgSize);
    min-height: var(--imgSize);
    position: relative;
    overflow: hidden;
    transition: all var(--animDur) var(--sleek);

    @include breakpoint(tiny, mobile) {
      max-height: 200px;
      max-width: 200px;
    }

    &.expanded {
      --imgSize: 300px;
    }

    &.expanded {
      border-radius: var(--cardRounding / 2) !important;
    }

    @include breakpoint(tiny, mobile) {
      //cardBody on (tiny, mobile) is .5em
      --imgGridRounding: calc(var(--cardRounding) - 0.5em);
    }
  }

  .imgContainer:nth-child(1) {
    border-radius: var(--imgGridRounding) 0 0 0;
  }

  .imgContainer:nth-child(2) {
    border-radius: 0 var(--imgGridRounding) 0 0;
  }

  .imgContainer:nth-child(3) {
    border-radius: 0 0 0 var(--imgGridRounding);
  }

  .imgContainer:nth-child(4) {
    border-radius: 0 0 var(--imgGridRounding) 0;
  }

  .img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform var(--animDur) ease-in-out;
  }
</style>
