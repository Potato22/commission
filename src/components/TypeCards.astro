---
import noImgPlchldr from "../assets/noImg.svg";
import { bodyTypes } from "../data/cardData";
interface Props {
  typeTitle: string;
  description: string;
  images: {
    src: string;
    alt?: string;
    style?: string; //lazy fuck solution
  }[];
  price: string;
  tags: string[];
  isDisabled?: boolean;
  isExpanded?: boolean;
}
const {
  typeTitle,
  description,
  images,
  price,
  tags,
  isDisabled = false,
  isExpanded = false,
} = Astro.props;

if (images.length > 4) {
  throw new Error(
    "Card can only hold 4 images." + ` parsed images: ${images.length}`
  );
} else {
  while (images.length < 4) {
    images.push({
      src: noImgPlchldr.src,
      alt: "Failed to load.",
      style: "filter: var(--inverto)",
    });
  }
}
//console.log("Received images:", images, images.length);
//console.log("Image array length:", images.length);
//console.log("Raw props:", Astro.props);

const cardId = typeTitle.toLowerCase().replace(/\s+/g, "-");

const disabled = isDisabled && !isExpanded ? "disabled" : "";
const configButtonText = isDisabled ? "Not available" : "Configure";
const priceState = isDisabled ? "*na" : "€" + price;

//const bodyTypes = ["pony", "semi-anthro", "anthro"];
function getTagClass(tag: string) {
  const tagString = tag.toLowerCase();
  if (tagString === "best selling") return "tag-bs";
  if (bodyTypes.includes(tagString)) return "tag-btype";
  return "";
}
---

<div class="cardBody" data-typeCard>
  <div class="imgGrid">
    <div class="imgContainer">
      <img
        src={images[0].src}
        alt={images[0].alt}
        class="img"
        style={images[0].style}
      />
    </div>
    <div class="imgContainer">
      <img
        src={images[1].src}
        alt={images[1].alt}
        class="img"
        style={images[1].style}
      />
    </div>
    <div class="imgContainer">
      <img
        src={images[2].src}
        alt={images[2].alt}
        class="img"
        style={images[2].style}
      />
    </div>
    <div class="imgContainer">
      <img
        src={images[3].src}
        alt={images[3].alt}
        class="img"
        style={images[3].style}
      />
    </div>
  </div>
  <div class="infobox">
    <div class="infocel1">
      <div class="typeTitle">{typeTitle}</div>
      <div class="description" set:html={description} />
      <div class="tags">
        {
          tags.map((tag) => (
            <span class={`tag ${getTagClass(tag)}`}>{tag}</span>
          ))
        }
      </div>
    </div>
    <div class="infocel2">
      <div class="priceBox">
        <span class="startsFrom">Starts from...</span>
        <div class="price">{priceState}</div>
      </div>
      <div class={`configureButton ${disabled}`} id={cardId}>
        {configButtonText}
      </div>
    </div>
  </div>
</div>

<script>
  import { navigate } from "astro:transitions/client";

  // Define the elements we need to toggle
  const togglables = [
    ".imgGrid",
    ".imgContainer",
    ".infocel2",
    ".priceBox",
    ".configureButton",
  ];

  // Helper function to toggle classes
  function toggleElementClasses(
    element: HTMLElement,
    className: string,
    action: "toggle" | "add" | "remove" = "toggle"
  ) {
    const elements = {
      self: element,
      children: togglables.reduce<Record<string, Element | Element[] | null>>(
        (acc, selector) => {
          return {
            ...acc,
            [selector]:
              selector === ".imgContainer"
                ? Array.from(element.querySelectorAll(selector))
                : element.querySelector(selector),
          };
        },
        {}
      ),
    };

    // Toggle the main element
    elements.self.classList[action](className);

    // Toggle all child elements
    Object.entries(elements.children).forEach(([selector, el]) => {
      if (!el) return;

      if (Array.isArray(el)) {
        el.forEach((item) => item.classList[action](className));
      } else {
        el.classList[action](className);
      }
    });
  }

  // Handle card expansion
  function handleCardClick(card: HTMLElement) {
    // Close other cards
    document.querySelectorAll("[data-typeCard]").forEach((otherCard) => {
      if (
        otherCard !== card &&
        otherCard instanceof HTMLElement &&
        otherCard.classList.contains("expanded")
      ) {
        toggleElementClasses(otherCard, "expanded", "remove");
      }
    });

    // Toggle clicked card
    toggleElementClasses(card, "expanded");
  }

  // Define and run the click handler initializer
  function initCardClickHandlers() {
    document.querySelectorAll("[data-typeCard]").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.addEventListener("click", () => handleCardClick(card));
      }
    });
  }
  initCardClickHandlers();

  // Handle configure button click
  function initConfigureButtonClickHandlers() {
    document.querySelectorAll(".configureButton").forEach((button) => {
      if (button instanceof HTMLElement) {
        button.addEventListener("click", (e) => {
          const cardId = button.id;
          const card = document.getElementById(cardId);
          if (card) {
            e.stopPropagation();
            //openConfig(button.id);
            //alert(`Configure ${cardId}`);
            //good ol alert debugger
            navigate(`/config/${cardId}`, {
              state: {
                cardId: cardId,
                // Add any other state you want to pass
              },
            });
          }
        });
      }
    });
  }
  initConfigureButtonClickHandlers();

  // rehydrater
  document.addEventListener("astro:after-swap", () => {
    initCardClickHandlers();
    initConfigureButtonClickHandlers();
  });
</script>

<style>
  .cardBody {
    --cardRounding: 50px;
    --animDur: 0.3s;
    cursor: pointer;
    display: flex;
    width: 50%;
    background-color: var(--accentSecondary);
    padding: 1rem;
    //border: 2px solid var(--fore);
    //box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: width var(--animDur) var(--sleek);
    border-radius: var(--cardRounding);

    &.expanded {
      width: 70%;
      cursor: auto;

      & .tag-btype {
        display: block;
        animation: trivialTags var(--animDur) var(--sleek) forwards;
      }
    }
  }

  @keyframes trivialTags {
    0% {
      opacity: 0;
      transform: translateY(0.5em);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .infobox {
    display: flex;
    justify-content: space-between;
    width: 100%;
    color: var(--fore);
    padding: 0 1em;
    position: relative;
  }

  .infocel1 {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    max-width: 80%;
  }

  .typeTitle {
    font-size: 3em;
    font-family: var(--doto);
    font-weight: 900;
  }

  .description {
    font-size: 1.5em;
    font-family: var(--content);
    font-weight: 300;
  }

  .tags {
    display: flex;
    margin-top: 1em;
    gap: 0.5em;
    flex-wrap: wrap;
  }

  .tag {
    font-family: var(--doto);
    font-weight: 900;
    background: var(--primSecondary);
    color: var(--fore);
    padding: 0.2em 0.8em;
    border-radius: 20px;
    box-sizing: border-box;

    &.tag-best {
      background: gold;
      color: black;
    }

    &.tag-btype {
      border: 1px solid var(--primSecondary);
      background: transparent;
      color: var(--prim);
      display: none;
    }
  }

  .infocel2 {
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-end;
    height: 100%;
    margin-right: 1em;
    right: 0;
  }

  .priceBox {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
    font-size: 3em;
    transition: all var(--animDur) var(--sleek);

    &.expanded {
      font-size: 5em;
    }
  }

  .startsFrom {
    font-family: var(--content);
    font-weight: 400;
    font-size: 0.3em;
    color: var(--foreSecondary);
    transform: translateY(-0.5em);
  }

  .price {
    font-family: var(--content);
    font-weight: 900;
    font-size: 1em;
    color: var(--fore);
  }

  .configureButton {
    position: relative;
    font-family: var(--content);
    font-size: 1.3em;
    background: var(--prim);
    color: var(--fore);
    border: 1px solid var(--base);
    padding: 0.2em 5em;
    border-radius: 25px;
    margin-top: -1em;
    margin-bottom: -0.5em;
    transition: all var(--animDur) var(--sleek);
    pointer-events: none;
    opacity: 0;
    font-weight: 700;

    &.expanded {
      margin-top: 1em;
      margin-bottom: 0.5em;
      pointer-events: all;
      opacity: 1;
      cursor: pointer;
      vertical-align: bottom;

      &::after {
        content: "↗";
        font-weight: 900;

        color: transparent;
        transition: none;
        position: absolute;
        right: 2em;
        /* adjust as needed */
        top: 50%;
        transform: translateY(-45%);
        pointer-events: none;
      }

      &:hover {
        background: transparent;
        color: var(--fore);
        border: 1px solid var(--prim);
        transform: scale(1.05);

        &::after {
          transition: all var(--animDur) var(--sleek);
          color: var(--fore);
          right: 0.5em;
        }
      }

      &.disabled {
        background: rgba(0, 0, 0, 0);
        box-sizing: content-box;
        border: 2px solid var(--viscueDisabled);
        color: var(--viscueDisabled);
        pointer-events: none;

        &:hover {
          background: rgba(0, 0, 0, 0);
          color: var(--viscueDisabled);
          transform: scale(1);
          cursor: not-allowed !important;
        }
      }
    }
  }

  .imgGrid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);

    /* transition: all var(--animDur) var(--sleek); */
    /* gap does not support animation (yet) */
    &.expanded {
      gap: 0.5em;
    }
  }

  .imgContainer {
    --imgSize: 100px;
    width: var(--imgSize);
    height: var(--imgSize);
    position: relative;
    overflow: hidden;
    transition: all var(--animDur) var(--sleek);

    &.expanded {
      --imgSize: 300px;
    }

    --imgGridRounding: calc(var(--cardRounding) / 1.5);

    &.expanded {
      border-radius: var(--cardRounding / 2) !important;
    }
  }

  .imgContainer:nth-child(1) {
    border-radius: var(--imgGridRounding) 0 0 0;
  }

  .imgContainer:nth-child(2) {
    border-radius: 0 var(--imgGridRounding) 0 0;
  }

  .imgContainer:nth-child(3) {
    border-radius: 0 0 0 var(--imgGridRounding);
  }

  .imgContainer:nth-child(4) {
    border-radius: 0 0 var(--imgGridRounding) 0;
  }

  .img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform var(--animDur) ease-in-out;
  }
</style>
