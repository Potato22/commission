---
import Type from "../TypeCards.astro";
import { cardList } from "../../data/cardData";
---

<div class="mainSelections" id="menu">
  <div id="pageLabel">
    <div class="label" id="label">
      <span>Comm</span><span id="typewriter"></span>
    </div>
    <span class="labelSecondary">Available Options</span>
    <script>
      function initlabelDeco() {

        const text = "ission";
        const typewriter = document.getElementById("typewriter");
        const label = document.getElementById("label");
  
        function updateTypewriter() {
          if (!label) return;
  
          // Get element's position relative to viewport
          const rect = label.getBoundingClientRect();
          const windowHeight = window.innerHeight;
  
          const triggerPoint = windowHeight * 0.8;
  
          // Calculate progress based on element position
          const progress = Math.min(
            Math.max(
              (triggerPoint - rect.top) / (triggerPoint * 0.5), // Adjust 0.5 to control animation length
              0
            ),
            1
          );
  
          // Calculate characters to show
          const charsToShow = Math.floor(progress * text.length);
  
          if (typewriter) {
            typewriter.textContent = text.substring(0, charsToShow);
          }
        }
  
        updateTypewriter();
        window.addEventListener("scroll", updateTypewriter);
      }
      initlabelDeco();

      document.addEventListener("astro:after-swap", () => {
        initlabelDeco();
      });
    </script>
  </div>
  <style>
    #pageLabel {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem 0;
    }
    .label {
      background: var(--fore);
      font-size: 2em;
      font-family: var(--display);
      font-weight: 700;
      padding: 0.2em 0.5em;
      color: var(--base);
      border-radius: 15px;
      transition: background 0.2s var(--sleek), color 0.2s var(--sleek);
    }
    .labelSecondary {
      font-family: var(--doto);
      font-size: 1em;
      margin-top: 0.5em;
      color: var(--accent);
      font-weight: bold;
      transition: color 0.2s var(--sleek);
    }
  </style>

  <Type
    typeTitle={cardList.sketchbook.title}
    description={cardList.sketchbook.description}
    images={cardList.sketchbook.images}
    price={cardList.sketchbook.price}
    tags={cardList.sketchbook.tags}
  />
  <Type
    typeTitle={cardList.headshot.title}
    description={cardList.headshot.description}
    images={cardList.headshot.images}
    price={cardList.headshot.price}
    tags={cardList.headshot.tags}
  />
  <Type
    typeTitle={cardList.fullbody.title}
    description={cardList.fullbody.description}
    images={cardList.fullbody.images}
    price={cardList.fullbody.price}
    tags={cardList.fullbody.tags}
  />
  <Type
    typeTitle="b��"
    description="?d�eeznâ‚¬u�ts"
    images={[{ src: "", alt: "" }]}
    price="0�"
    tags={["none"]}
    isDisabled
  />
</div>

<style>
  .mainSelections {
    background: var(--base);
    transition: background 0.2s var(--sleek);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
    user-select: none;
  }
</style>

<div id="configModal" class="modal" style="display:none;">
  <div class="modal-content">
    <span id="closeModal" class="close">&times;</span>
    <div id="modalBody">
      <!-- Config UI will be injected here -->
    </div>
  </div>
</div>
